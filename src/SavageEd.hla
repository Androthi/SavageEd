///		Goals for v.0.7.xx
///	[X]	Subclass the richedit control
///	[X]	Move keyboard processing control to the subclassed proc
///
///		these are 'maybe' features, could get cancelled, could get
///
///	[ ]	Isolate the edit structure to prepare for multi-buffers
///		moved to other minor versions
/// [ ]	Allow user to customize keys
/// [X] allow user to edit SavageEd.ini directly in the editor.
///		this might require rethinking some of the .ini setup
/// [ ] add command bar

program SavageEd;

	#include("SavageEd.hhf")

	?@nodisplay :=true;
	?@nostackalign := true;

readonly
	// WM_COMMAND message table, wparam items go here
	command_table	:MsgProcPtr_t; @nostorage;
		MsgProcPtr_t
			MsgProcPtr_t:[ IDM_QUIT,	&Cmd_File_Quit	],
			
			// add more commands here
			MsgProcPtr_t:[ 0,				NULL			];


storage
	logfont			:w.LOGFONT;
	frflags			:dword;
	buffer			:byte[szLINEBUFFER];
	findbuf			:byte[300];
	replacebuf		:byte[300];
	ft				:w.FINDTEXTEX;
	fres			:int32;
	return			:string;	// returned from Proc_Input, caller must free string

	customColors:dword[16];
		
	chrg		:range;
	find_range	:w.TEXTRANGE;
	
	config		:tConfig;
	window		:wnd_settings;
	align(4);

static
	Align(4);
	info		:EditInfo;
	statusParts	:int32[STATUS_PARTS]:=[POS_LINES, POS_INS, POS_READONLY, POS_MARK, POS_MODE];
	strbuf		:str.strvar( w.MAX_PATH );
	strtabs		:str.strvar( w.MAX_PATH ); // user specified tabs converted to spaces

	
proc


	selectFont :procedure;

		// handles Font selection
		static	cf:w.CHOOSEFONT;

	begin selectFont;
	
		w.RtlZeroMemory( &cf, @size(cf) );
		mov( @size(cf), cf.lStructSize );
		mov( window.hwnd, eax );
		mov( eax, cf.hWndOwner );
		mov( &logfont, cf.lpLogFont );
		mov( w.CF_SCREENFONTS | w.CF_EFFECTS | w.CF_INITTOLOGFONTSTRUCT, cf.Flags );
		push( window.textColor );
		pop( cf.rgbColors );
		
		w._ChooseFont(cf);
		if (eax) then

			w.DeleteObject(info.hfont);
			w.CreateFontIndirect(logfont);
			mov( eax, info.hfont );
			push( cf.rgbColors );
			pop( window.textColor );
			setFormat();
			config.writeHex( s_text, s_background_color, window.backColor);
			config.writeHex( s_text, s_text_color, window.textColor);

			config.writeInt( s_font, "Height", logfont.lfHeight );
			config.writeInt( s_font, "Width", logfont.lfWidth );
			config.writeInt( s_font, "Weight", logfont.lfWeight );
			
			movzx( logfont.lfItalic, eax );
			config.writeInt( s_font, "Italic", eax );
			movzx( logfont.lfPitchAndFamily, eax );
			config.writeInt( s_font, "Pitch", eax );
			str.cpyz (&logfont.lfFaceName, strbuf );
			config.writeString( s_font, "Name", strbuf );
			
		endif;
	end selectFont;
	selectColor :procedure { @returns("EAX") };
		
		// color picker
		static 	cc			:w.CHOOSECOLOR;
		
	begin selectColor;
		dbg.put ("selectColor");
		mov( &cc, eax );
		w.RtlZeroMemory( eax, @size(w.CHOOSECOLOR) );
		mov( @size (cc), eax );
		mov( eax, cc.lStructSize );
		push(window.hwnd );
		pop( cc.hwndOwner );
		push( window.hinst );
		pop( cc.hInstance );
		mov( w.CC_RGBINIT, cc.Flags );
		mov( &customColors, cc.lpCustColors);
		push( window.backColor );
		pop( cc.rgbResult );
		mov( &cc, eax );
		w._ChooseColor( &cc );
		dbg.put("choose color :", eax );
		if( eax ) then
			push( cc.rgbResult );
			pop( return );	// black color can be zero so we'll use this to return color value
			config.writeBin( s_text, s_custcolors, &customColors, @size( customColors ) );
			or( 1, eax );
		endif;

	end selectColor;

	updateMenu :procedure;	
	
		// updates the recent files menu
		// based on user options
	
		var
			count	:uns32;
			
	begin updateMenu;
		pushabi;
		dbg.put("updateMenu");
		if( window.hsubmenu <> 0 ) then
			w.DestroyMenu( window.hsubmenu );
			mov( 0, window.hsubmenu );
		endif;
			
		w.CreatePopupMenu();
		mov( eax, window.hsubmenu );
		mov( RECENT_MENU_START, ebx );
		config.getItemCount( s_recent );
		mov( eax, count );
		
		for( mov( 0, ecx ); ecx < count; inc( ecx ) ) do
			
			if( config.readItem( s_recent, ecx, hide.strbuf ) ) then
				USE( ECX, EBX );
				w.AppendMenu( window.hsubmenu, w.MF_BYPOSITION | w.MF_ENABLED | w.MF_STRING,
							ebx, hide.strbuf);
				ENDUSE;
			endif;
			inc( ebx );
		endfor;
		
		w.GetMenu( window.hwnd );
		w.GetSubMenu( eax, 0 );
		w.ModifyMenu( eax, 8, w.MF_BYPOSITION | w.MF_POPUP| w.MF_ENABLED,
					window.hsubmenu, s_recent );
	
		if( config.readBool( s_settings, s_wrap )) then
			
			w.CheckMenuItem( window.hmenu, IDM_WRAP, w.MF_BYCOMMAND | w.MF_CHECKED );
			w.SendMessage( info.hred, w.EM_SETTARGETDEVICE, NULL, 0 );
		else
			w.SendMessage( info.hred, w.EM_SETTARGETDEVICE, NULL, 1 );			
		endif;
		
		if( config.readBool( s_settings, s_readonly )) then
			
			w.CheckMenuItem( window.hmenu, IDM_READONLY, w.MF_BYCOMMAND | w.MF_CHECKED );
		endif;
		
		if( config.readBool( s_settings, s_autosave ) ) then
			w.CheckMenuItem( window.hmenu, IDM_AUTO, w.MF_BYCOMMAND | w.MF_CHECKED);
		endif;
		
		if( config.readBool( s_settings, s_autoindent ) ) then
			w.CheckMenuItem( window.hmenu, IDM_AUTOINDENT, w.MF_BYCOMMAND | w.MF_CHECKED);
		endif;
		
		if( config.readBool( s_settings, s_tabsasspace ) ) then
			w.CheckMenuItem( window.hmenu, IDM_TAB_AS_SPACE, w.MF_BYCOMMAND | w.MF_CHECKED);
		endif;
		
		if( config.readBool( s_settings, s_topwindow )) then

			w.CheckMenuItem( window.hmenu, IDM_PEG, w.MF_BYCOMMAND | w.MF_CHECKED );
			w.SetWindowPos( window.hwnd, w.HWND_TOPMOST, 0, 0, 0, 0, 0 );		

		endif;
		
		if( config.readBool( s_settings, s_clearexit ) ) then
			
			w.CheckMenuItem( window.hmenu, IDM_CLEAREXIT, w.MF_BYCOMMAND | w.MF_CHECKED );
			
		endif;
		
		if( config.readBool( s_settings, s_recentnew ) ) then
			
			w.CheckMenuItem( window.hmenu, IDM_RECENTNEW, w.MF_BYCOMMAND | w.MF_CHECKED );
			
		endif;
			
		if( config.readBool( s_settings, s_openrecent ) ) then
			
			w.CheckMenuItem( window.hmenu, IDM_OPENRECENT, w.MF_BYCOMMAND | w.MF_CHECKED );
			
		endif;
		
		if( config.readBool( s_settings, s_rememberpos ) ) then
			w.CheckMenuItem( window.hmenu, IDM_REMEMBERPOS, w.MF_BYCOMMAND | w.MF_CHECKED );
		endif;
		
		if( config.readBool( s_window, s_status ) ) then
			
			w.CheckMenuItem( window.hmenu, IDM_VIEW_STATUS, w.MF_BYCOMMAND | w.MF_CHECKED );
			w.ShowWindow( window.hstatus, true );
			
		endif;
		
		w.DrawMenuBar( window.hwnd );
		
		//dbg.put("/updateMenu");
		popabi;
	end updateMenu;
	
	loadFile :procedure( filename:string );
	
		// load filename into the edit buffer
		var
			hfile	:dword;
			
	
	begin loadFile;
		dbg.put("loadFile :", filename);		
		try
			
			fileio.open( filename, fileio.r );
			mov( eax, hfile );
			setText( hfile );
			fileio.close( hfile );
			str.cpy( filename, info.filepath );

			dbg.put("filename = ", filename );
			filesys.extractExt( filename, strbuf );
			checkLog();
			updateRecentLog();
			setFormat();
			// clear the undo buffer since we probably made some formatting and alterations
			// to the file
			w.SendMessage( info.hred, w.EM_EMPTYUNDOBUFFER, 0, 0 );
			mov( MODE_INSERT, info.mode );
			updateStatus();	
			or( 1, eax );
			
		anyexception
			
			Error( s_noopen, true );
			xor( eax, eax );
			
		endtry;
		
		dbg.put("/loadFile");
	end loadFile;

	fileOpen :procedure;
	
		// get a filename from openfile dialog
		// get it loaded into buffer
		var
			ofn	:w.OPENFILENAME;
				
	begin fileOpen;
	
		lea( eax, ofn );
		w.RtlZeroMemory(eax,@size(ofn));
		mov	(@size(ofn),ofn.lStructSize);
		mov	(window.hwnd,ofn.hWndOwner);
		mov( window.hinst, ofn.hInstance );
		
		mov	(&curdir,eax);
		mov (eax, ofn.lpstrInitialDir);
		
		mov (0, buffer[0]);
		mov (&buffer, ofn.lpstrFile);
		mov	(@elements(buffer)-1, ofn.nMaxFile);
		
		mov	(w.OFN_PATHMUSTEXIST | w.OFN_FILEMUSTEXIST | w.OFN_LONGNAMES,ofn.Flags);
		w.GetOpenFileName(ofn);
			if (eax) then
				str.cpyz( &buffer, hide.strbuf );
				loadFile( hide.strbuf );
			endif;
		w.SetFocus(info.hred);

	end fileOpen;
		
	findNormal :procedure( opts:dword );
	
		// basic text search
	
	begin findNormal;
		
		move( &findbuf, ft.lpstrText);
		dbg.put("find normal : ");
		dbg.putz( ft.lpstrText );
		w.SendMessage( info.hred, w.EM_FINDTEXTEX, opts, &ft );
		mov( eax, fres );
		if(eax != -1) then
	
			w.SendMessage( info.hred, w.EM_EXSETSEL, 0, &ft.chrgText );
			w.SendMessage( info.hred,w.EM_SCROLLCARET,0,0 );
	
		else

			// done search, reset and start searching from top
			// or bottom
			if( info.find_mode.down ) then
				w.SendMessage( info.hred, w.EM_SETSEL, 0, 0 );
				mov( 0, ft.chrg.cpMin );
				
			else
				w.SendMessage( info.hred, w.WM_GETTEXTLENGTH, 0, 0 );
				w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
			endif;
		endif;
		
	end findNormal;
	
	findPattern :procedure( opts:dword );
		
		// uses pattern matching to search for text
		
		var
			hmem	:hide.memory;
			
	
	begin findPattern;
		
		dbg.enters( "findPattern" );
		cmp( (type byte findbuf[0]), 0 );
		mov( 0, hmem );
		je retFalse;
		
		move( ft.chrg.cpMin, find_range.chrg.cpMin );
		w.SendMessage( info.hred, w.WM_GETTEXTLENGTH, 0, 0 );
		mov( eax, find_range.chrg.cpMax );
		sub( ft.chrg.cpMin, eax );
		
		add( 4, eax );
		mem.zalloc( eax );
		mov( eax, hmem );
		mov( eax, find_range.lpstrText );
		
		w.SendMessage( info.hred, w.EM_GETTEXTRANGE, 0, &find_range );
		mov( hmem, esi );
		str.cpyz( &findbuf, hide.strbuf );
		scan.pfind( hide.strbuf, info.find_mode.matchcase );
		jnc retFalse;
		
		// we found the pattern...
		// find it's index and length.  esi = start, edi = end.
		// edi - esi = length
		// esi - hmem = index into buffer
		mov( esi, eax ); 
		sub( hmem, eax );
		add( eax, ft.chrg.cpMin );
		move( ft.chrg.cpMin, fres );
		mov( edi, eax );
		sub( esi, eax );
		push( ft.chrg.cpMin );
		pop( ft.chrg.cpMax );
		add( eax, ft.chrg.cpMax );
		w.SendMessage( info.hred, w.EM_EXSETSEL, 0, &ft.chrg );
		w.SendMessage( info.hred,w.EM_SCROLLCARET,0,0 );
		
		jmp done;
		
		retFalse:
			dbg.put("not found");
			w.SendMessage( info.hred, w.EM_SETSEL, 0, 0 );
			mov( 0, ft.chrg.cpMin );
			mov( -1, fres );
			
			
		done:
			if( hmem > 0 ) then
				mem.free( hmem );
			endif;
			mov( fres, eax );
				
		dbg.exits( "findPattern" );		
	end findPattern;
	
	getFindMode :procedure {@noframe};
	begin getFindMode;
		xor( eax, eax );
		if( info.find_mode.down ) then
			or( w.FR_DOWN, eax );
		endif;
		if( info.find_mode.matchcase ) then
			or( w.FR_MATCHCASE, eax );
		endif;
		if( info.find_mode.wholeword ) then
			or( w.FR_WHOLEWORD, eax );
		endif;
		ret();
	end getFindMode;

	
	Find :procedure {@noframe};
	
		// looks for selection
		// searches for text based on user settings
	
	begin Find;
		pushabi;
		dbg.put("find");
		w.SendMessage(info.hred, w.EM_EXGETSEL,0, &ft.chrg);
		
		if( info.find_mode.down ) then
			
			mov( ft.chrg.cpMax, eax );
			if( eax != ft.chrg.cpMin ) then
				// we have a selection already, don't try to find
				// currently selected text
				mov( eax, ft.chrg.cpMin );
			endif;
			mov( -1, ft.chrg.cpMax );

		else

			mov( 0, ft.chrg.cpMax );

		endif;
		
		getFindMode();
		if( info.find_mode.matchpattern ) then
			
			findPattern( eax );
			
		else
			
			findNormal( eax );
			
		endif;
		popabi;
		ret();
	end Find;

	Proc_Edit	:procedure( lParam:dword; wParam:dword; uMsg:uns32; hWin:dword );
	
		// this is the subclassed window procedure of the edit control
		// here we will intercept key messages and pass down only
		// the ones we want the edit control to receive.
		static
			ctrl_down	:boolean;
			shift_down	:boolean;
			alt_down	:boolean;
			
		
		
	begin Proc_Edit;
		
		NOTE(Sevag:
			if we open any dialog while processing a key stroke
			set ctrl_down to false since the key_up
			message will be lost in the dialog's window proc)
			
		mov( uMsg, eax );
		switch( eax )
			
			case( w.WM_SYSKEYDOWN )
				dbg.put("syskey down =>", wParam );
				mov( true, alt_down );
				
			case( w.WM_SYSCHAR )
				dbg.put("syschar =>", wParam );
			
			case( w.WM_SYSKEYUP )
				dbg.put("syskey up =>", wParam );
				mov( false, alt_down );
//bm=keycommands			
			case( w.WM_KEYDOWN )
				dbg.put("key down =>", wParam );
				mov( wParam, eax );
				switch( eax )
				
					case( w.VK_SHIFT )
						mov( true, shift_down );

					case( w.VK_CONTROL )
						mov( true, ctrl_down );
						// we don't want the control key
						// going to rich edit
						jmp skip_proc;
	
					case( w.VK_W )
						
						// delete word under cursor
						if( ctrl_down ) then
							
							if( shift_down ) then
								command_copy_word();
							else
								command_delete_word();
							endif;
						endif;

					case( w.VK_D )

						if( ctrl_down ) then
							
							inc( info.cursor.end_index );
							w.SendMessage( info.hred, w.EM_EXSETSEL, 0, &info.cursor );
							w.SendMessage( info.hred, w.EM_REPLACESEL,true, s_empty );
						
						endif;
						
					case( w.VK_BSLASH )

						if( ctrl_down ) then
							
							command_cut_line();
							
						endif;
						
					case( w.VK_F )
			
						if( ctrl_down ) then
							Msg_Command( window.hwnd, IDM_FIND,0 );
							mov( false, ctrl_down );
						endif;

					case( w.VK_G )

						if( ctrl_down ) then
							Msg_Command( window.hwnd, IDM_EDIT_GOTO,0 );
							mov( false, ctrl_down );
						endif;

					case( w.VK_I )
						
						if( ctrl_down ) then
							command_cursor_up();
							jmp skip_proc;
						endif;

					case( w.VK_J )
					
						dbg.put("wParam :", wParam );
						if( ctrl_down ) then
							command_cursor_left();
							mov( 0, info.saved_column_index );
							jmp skip_proc;
						endif;
						
					case( w.VK_K )
						
						if( ctrl_down) then
							command_cursor_down();
							jmp skip_proc;
						endif;

					case( w.VK_L )
						
						if( ctrl_down ) then
							command_cursor_right();
							mov( 0, info.saved_column_index );
							jmp skip_proc;
						endif;

					case( w.VK_LBRACKET )
					
						if( ctrl_down ) then
							command_move_to_bol();
							jmp skip_proc;
						endif;

					case( w.VK_RBRACKET )
						if( ctrl_down ) then
							command_move_to_eol();
							jmp skip_proc;
						endif;

					case( w.VK_N )
						if( ctrl_down ) then
							Msg_Command( window.hwnd, IDM_NEW, 0 );
							mov( false, ctrl_down );  
						endif;

					case( w.VK_O )
						if( ctrl_down ) then
							Msg_Command( window.hwnd, IDM_OPEN,0 );
							mov( false, ctrl_down );
						endif;	

					case( w.VK_S )
						if( ctrl_down && shift_down ) then
							Msg_Command( window.hwnd, IDM_SAVEAS,0 );
						elseif( ctrl_down ) then
							Msg_Command( window.hwnd, IDM_SAVE,0 );
						endif;
						mov( false, ctrl_down );

					case( w.VK_T )
						if( ctrl_down ) then
							Msg_Command( window.hwnd, IDM_PEG,0 );
						endif;

					case( w.VK_F2 )
						Msg_Command( window.hwnd, IDM_AUTO,0 );
						mov( false, ctrl_down );

					case( w.VK_F3 )
						if( ctrl_down ) then
							Msg_Command( window.hwnd, IDM_FINDPREV,0 );
						else
							Msg_Command( window.hwnd, IDM_FINDNEXT,0 );
						endif;
						
					case( w.VK_F4 )
						Msg_Command( window.hwnd, IDM_WRAP,0 );

					case( w.VK_F5 )
						Msg_Command( window.hwnd, IDM_TIME,0 );
						
					case( w.VK_F6 )
						Msg_Command( window.hwnd, IDM_READONLY,0 );

					case( w.VK_COMMA )
						if( ctrl_down ) then
							// same as ctrl-left
							// put VK_LEFT in wParam and let
							// hred window proc handle it.
							mov( w.VK_LEFT, wParam );
						endif;
						
					case( w.VK_PERIOD )
						if( ctrl_down ) then
							// same as ctrl-right
							// put VK_RIGHT in wParam and let
							// hred window proc handle it.
							mov(w.VK_RIGHT, wParam );
						endif;

					case( w.VK_TAB )
						
						if( shift_down ) then
							if( ctrl_down ) then
								
								command_reduce_indent();							
								jmp skip_proc;
							else
								command_increase_indent();
								jmp skip_proc;
							endif;
						
						elseif( config.readBool( s_settings, s_tabsasspace )) then
							dbg.put("tabs :", strtabs );
							w.SendMessage( info.hred, w.EM_REPLACESEL,true, strtabs );
							jmp skip_proc;
							
						else
							// it's a normal tab, let hred handle it
							dbg.put("tab.....");
							mov( w.WM_CHAR, uMsg );
							mov( w.VK_TAB, wParam );
						endif;
					
					case( w.VK_RETURN )
						
						NOTE(Sevag:
							This isn't working properly if there
							is word wrap going on
						)
						
						// intercept the enter key
						// if shift-enter, then create empty line below and move cursor there
						// if ctrl-enter then create empty line above and move cursor there
						// we want to maintain auto indent features if possible. will
						// probably not work if new line is being created above the 1st line.
					
						if( ctrl_down ) then
							
							// check to see if we are on line 1
							if( info.line.number = 0 ) then
								
								command_move_to_bol();
								
							else
							
								// open line above
								command_cursor_up();
								getInfo(info);
								jmp do_shift;
							
							endif;
						
						elseif( shift_down ) then
							
							do_shift:
							//open line below
							// if we are not at eol, then move to eol
							mov( info.column_index, eax );
							if( info.line.length != eax ) then
								command_move_to_eol();
							endif;
						
						endif;
					
					case( w.VK_SPACE )
						
						if( ctrl_down ) then
							
							command_toggle_mark();
							jmp skip_proc;
						endif;
					
					TODO( need to add command bar )
					//case( w.VK_SLASH )
						
						// experimental : do incremental search
					//	mov( true, info.incremental_search );

					case( w.VK_ESCAPE )

						w.SendMessage( window.hwnd, w.WM_CLOSE, 0, 0 );

					default
						//dbg.put("reached default");
						mov( 0, info.saved_column_index );

				endswitch;
			
			case( w.WM_KEYUP )
				
				dbg.put("key up =>", wParam );
				mov( wParam, eax );
				switch( eax )
					case( w.VK_SHIFT )
						mov( false, shift_down );
						
					case( w.VK_CONTROL )
						mov( false, ctrl_down );
						jmp skip_proc;

					case( w.VK_RETURN )
						// a return was just processed in the edit control
						// do auto indent stuff
						if( config.readBool( s_settings, s_autoindent ) ) then

							w.SendMessage( info.hred, w.EM_LINEFROMCHAR, -1, 0);
							dec( eax );
							mov( szLINEBUFFER-1, (type word buffer[0]));
							w.SendMessage( info.hred, w.EM_GETLINE, eax, &buffer );
							if( eax ) then
								xor( ecx, ecx );
								while( eax ) do
									mov( buffer[ecx], dl );
									
									// counts the number of white spaces, either tabs or spaces
									if( dl == $09 || dl == ' ' ) then
										inc( ecx );
									else
										break;
									endif;
									dec( eax );
								endwhile;
								
								// if we are here, then ecx contains number of white space
								
								if( ecx ) then
									str.cpy("", strbuf );
									if( config.readBool( s_settings, s_tabsasspace ) ) then
										while( ecx ) do
											str.cat( " ", strbuf);
											dec( ecx );
										endwhile;
									else
										while( ecx ) do
											str.cat( "	", strbuf);
											dec( ecx );
										endwhile;
									endif;
									w.SendMessage( info.hred, w.EM_REPLACESEL,true, strbuf );
									w.SendMessage( info.hred, w.EM_SCROLLCARET,0,0);
								endif;
							endif;
						endif;


				default
				endswitch;
				
			case( w.WM_CHAR )
				dbg.put("char =>", wParam );
				
				mov( wParam, eax );
				if( ctrl_down || eax = w.VK_TAB ) then
					jmp skip_proc;
				endif;

		endswitch;
			
		// pass control to the default edit window proc
		w.CallWindowProc(info.old_proc, hWin, uMsg, wParam, lParam );
		
		skip_proc:
			// jump here to prevent richedit processing the key press
		
	end Proc_Edit;



	Proc_FindDlg :procedure( lParam:dword; wParam:dword; uMsg:uns32; hWin:dword );
	
		// opens find dialog
	
	begin	Proc_FindDlg;
		pushabi;
		mov(uMsg,eax);
		if (eax = w.WM_INITDIALOG) then
			mov	(hWin, eax);
			mov	(eax,window.hfind);
			mov(0,fres);
			w.SendDlgItemMessage(hWin,IDC_FINDTEXT,w.EM_LIMITTEXT, @elements(findbuf)-1, 0);
			w.SendDlgItemMessage(hWin,IDC_FINDTEXT,w.WM_SETTEXT,0, &findbuf);
			
			w.SendDlgItemMessage(hWin,IDC_REPLACETEXT,w.EM_LIMITTEXT, @elements(replacebuf)-1, 0);
			w.SendDlgItemMessage(hWin,IDC_REPLACETEXT,w.WM_SETTEXT,0, &replacebuf);
			
			if( info.find_mode.matchcase ) then
				w.CheckDlgButton(hWin,IDC_CHK_MATCHCASE,w.BST_CHECKED);
			endif;
			
			if( info.find_mode.wholeword ) then
				w.CheckDlgButton(hWin,IDC_CHK_WHOLEWORD,w.BST_CHECKED);
			endif;
			
			if( info.find_mode.matchpattern ) then
				w.CheckDlgButton(hWin,IDC_CHK_PATTERN,w.BST_CHECKED);
			endif;
			
			if( info.find_mode.down ) then
				mov( IDC_RBN_DOWN, edx );
			else
				mov( IDC_RBN_UP, edx );
			endif;
			w.CheckDlgButton(hWin, edx, w.BST_CHECKED);
				
		elseif (eax = w.WM_COMMAND) then
			mov	(wParam, eax);
			mov	(eax,edx);
			shr	(16,edx);
			and	($ffff,eax);
			if (edx = w.BN_CLICKED) then
				
				if(eax = w.IDOK) then
					
					Find();
					w.SetFocus(window.hfind);
					
				elseif(eax = w.IDCANCEL) then
				
					w.SendMessage( hWin, w.WM_CLOSE, NULL, NULL );
					
				elseif(eax = IDC_BTN_REPLACE) then
					
					if (fres!=-1) then
					
						w.SendMessage(info.hred,w.EM_EXGETSEL,0,&ft.chrg);
						w.SendMessage(info.hred,w.EM_REPLACESEL,true, &replacebuf);
						zstr.len( &replacebuf );
						w.lstrlen( &replacebuf ); 
						add(eax,ft.chrg.cpMin);
						mov(ft.chrg.cpMin,eax);
						mov(eax,ft.chrg.cpMax);
						w.SendMessage(info.hred,w.EM_EXSETSEL,0,&ft.chrg);
						
					endif;
					Find();
					w.SetFocus(window.hfind);
	
				elseif (eax = IDC_BTN_REPLACEALL) then
					
					mov( true, info.find_mode.down );
					
					w.SendMessage (info.hred, w.EM_EXGETSEL, 0, &chrg);
					w.LockWindowUpdate(info.hred);
					w.SendMessage (info.hred, w.EM_SETSEL, 0, 0);
					Find();
					while (fres!=-1) do
						w.SendMessage(hWin, w.WM_COMMAND, IDC_BTN_REPLACE,0);
					endwhile;
					push (chrg.start_index);
					pop (chrg.end_index);
					w.SendMessage (info.hred, w.EM_EXSETSEL, 0, &chrg);
					w.LockWindowUpdate(NULL);
					w.SetFocus(window.hfind);
					
				elseif (eax = IDC_RBN_DOWN) then
					
					mov( true, info.find_mode.down );
					mov	(-1,fres);
					
				elseif (eax = IDC_RBN_UP) then
					
					mov( false, info.find_mode.down );
					mov( false, info.find_mode.matchpattern );
					w.CheckDlgButton( hWin, IDC_CHK_PATTERN, w.BST_UNCHECKED );
					mov	(-1, fres);
					
				elseif (eax = IDC_CHK_MATCHCASE) then
					
					w.IsDlgButtonChecked(hWin, IDC_CHK_MATCHCASE);
					if (eax) then
						mov( true, info.find_mode.matchcase );
						
					else
						
						mov( false, info.find_mode.matchcase );
						
					endif;
					mov	(-1, fres);
					
				elseif (eax = IDC_CHK_WHOLEWORD) then
					
					w.IsDlgButtonChecked(hWin, IDC_CHK_WHOLEWORD);
					if (eax) then
						
						//or	(w.FR_WHOLEWORD, fr);
						mov( true, info.find_mode.wholeword );
						mov( false, info.find_mode.matchpattern );
						w.CheckDlgButton( hWin, IDC_CHK_PATTERN, w.BST_UNCHECKED );
						
					else
						
						//and(! w.FR_WHOLEWORD,fr);
						mov( false, info.find_mode.wholeword );
						
					endif;
					mov	(-1,fres);
					
				elseif( eax = IDC_CHK_PATTERN ) then
					
					w.IsDlgButtonChecked(hWin, IDC_CHK_PATTERN);
					if (eax) then
						
						mov( false, info.find_mode.wholeword );
						mov( true, info.find_mode.matchpattern );
						w.CheckDlgButton( hWin, IDC_CHK_WHOLEWORD, w.BST_UNCHECKED );
						w.CheckRadioButton( hWin, IDC_RBN_DOWN, IDC_RBN_UP, IDC_RBN_DOWN );
						
					else
						
						mov( false, info.find_mode.matchpattern );
						
					endif;
					mov	(-1,fres);

				endif;
	
	
			elseif( edx = w.EN_UPDATE ) then
	
				push( ebx );
				mov( eax, ebx );
				if( w.SendDlgItemMessage(hWin, ebx, w.EM_GETMODIFY, 0, 0 )) then
	
					if (ebx = IDC_FINDTEXT) then
	
						w.SendDlgItemMessage(hWin, ebx, w.WM_GETTEXT, @elements(findbuf)-1, &findbuf);
						mov	(-1, fres);
						
						getFindMode();
						findNormal( eax );
						if( fres != -1 ) then
							updateStatus();
						endif;

						
					elseif( ebx = IDC_REPLACETEXT) then
						w.SendDlgItemMessage(hWin, ebx, w.WM_GETTEXT, @elements(replacebuf)-1, &replacebuf);
						mov	(-1, fres);
						
					endif;
					
					w.SendDlgItemMessage( hWin, ebx, w.EM_SETMODIFY, false, 0 );
				endif;
				
				pop( ebx );
	
			endif;
			
		elseif (eax = w.WM_ACTIVATE) then
			w.SetFocus( window.hfind );
	
		elseif (eax = w.WM_CLOSE) then
			w.DestroyWindow(window.hfind);
			mov	(0,window.hfind);
			w.SetFocus(info.hred);
		else
			mov	(false, eax);
			popabi;
			exit Proc_FindDlg;
		endif;
		mov	(true, eax);
		popabi;
	end Proc_FindDlg;	


	getConfigPath :procedure( s:string );
	
		// locates the configuration file
		var
			default_config	:string;
			find_config		:string; 
	
	begin getConfigPath;
		
		mov( str.talloc( w.MAX_PATH ), default_config );
		mov( str.talloc( w.MAX_PATH ), find_config );
		
		
		// look for config at default location, which is SavageEd folder
		w.GetModuleFileName (window.hinst, &buffer, @size(buffer) );
		str.cpyz( &buffer, default_config );
		filesys.extractPath( default_config, default_config );
		str.put2( default_config, '\', config_file );
		if( filesys.exists( default_config )) then
			
			// we found config in SavageEd home folder, means the user
			// wants to use a local configuration file.
			str.cpy( default_config, s );
		else
			
			// no default config file, look for one in %USERPROFILE%\config\
			w.ExpandEnvironmentStrings( "%USERPROFILE%", &buffer, szLINEBUFFER );
			str.cpyz( &buffer, find_config ); 
			str.put2( find_config, "\config\", config_file );

			if( filesys.exists( find_config )) then
				
				// we found a profile in the user folder
				str.cpy( find_config, s );
			
			else
				
				// there is no config file, use default
				str.cpy( default_config, s );
				
			endif;
			
		endif;
		
	end getConfigPath;


	initConfig	:procedure;
	
	/*
		Look for SavageEd.ini file:
			Look in current folder, if found, use that one.
			else, look in %USERPROFILE%\config\, if found, use that one.
			else, create a new one in the current folder.
		
		read settings from config file
		expand this as more settings are added
	*/
	
		var
			config_path	:string;
			
	
	begin initConfig;
		
		mov( str.talloc(400), config_path );
		getConfigPath( config_path );
		if( filesys.exists( config_path ) ) then
			
			// set default find mode
			mov( false, info.find_mode.down );
			mov( false, info.find_mode.wholeword );
			mov( false, info.find_mode.matchcase );
			mov( false, info.find_mode.matchpattern );
			
			mov( 0, info.saved_column_index );
			
			// config file exists, read it and
			// apply settings as per file.
			config.create_file( config_path );
			config.readUns( s_window, "xPos" );
			mov( eax,window.xPos );
			config.readUns( s_window, "yPos" );
			mov( eax,window.yPos );
			config.readUns( s_window, "width" );
			mov( eax,window.width );
			config.readUns( s_window, "height" );
			mov( eax,window.height );
			
			
			config.readInt( s_font, "Height" );
			mov( eax, logfont.lfHeight );
			config.readInt( s_font, "Width" );
			mov( eax, logfont.lfWidth );
			config.readInt( s_font, "Weight" );
			mov( eax, logfont.lfWeight );
			str.cpyz (&logfont.lfFaceName, strbuf );
			
			config.readString( s_font, "Name", strbuf );
			zstr.cpy( (type zstring strbuf ), &logfont.lfFaceName );
			
			config.readInt( s_font, "Italic");
			mov( al, logfont.lfItalic);
			config.readInt( s_font, "Pitch" );			
			mov( al, logfont.lfPitchAndFamily);
			config.readHex( s_text, s_background_color);
			mov( eax, window.backColor );
			config.readHex( s_text, s_text_color);
			mov( eax, window.textColor );

			config.readBin( s_text, s_custcolors, &customColors, @size( customColors ) );
			config.readBin( s_text, s_find, &info.find_mode, @size( info.find_mode ) ); 
			
		else
			
			// no file exists, create one
			// and set up with default settings.
			
			config.create();
			config.writeUns( s_settings, s_tabs, DEFAULT_TAB_STOP );

			// some hard coded defaults
			mov( 10,window.xPos );
			mov( 10,window.yPos );
			mov( 640,window.width );
			mov( 400,window.height );
			
			mov( color_white, window.backColor);
			mov( color_black, window.textColor);
			
			// get default font
			zstr.cpy( (type zstring s_fontname ), &logfont.lfFaceName );
			str.cpyz( &s_fontname, strbuf );
			config.writeString( s_font, "Name", strbuf );
			mov( -12, logfont.lfHeight );
			mov( 400, logfont.lfWeight );
			mov( 0, logfont.lfItalic );
			mov( 49, logfont.lfPitchAndFamily );
			mov( 400, logfont.lfWeight );
			config.writeFileName( config_path );
			
		endif;
				
	end initConfig;

	updateStatus :procedure;
		
		// update the status bar
		// called every time a key up message is processed
		// or when the status bar needs to be updated
		var
			tempstr	:string;
			
			
	begin updateStatus;
		
		mov( str.talloc( 1000 ), tempstr );
		getInfo( info );
		
		// draw the line/pos information on the status bar
		mov( info.line.number, eax );
		inc( eax );
		conv.u32ToStr( eax, 20, ' ', tempstr );
		str.trim( tempstr );
		str.put( strbuf, "Line: ", tempstr, "   " );
		conv.u32ToStr( info.column_index, 20,' ', tempstr );
		str.trim( tempstr );
		str.put2( strbuf, "Column: ", tempstr, "   " );
		mov( info.lines, eax );
		str.put2( strbuf, "    Pos: ", (type uns32 info.cursor.start_index ), " | Lines: ", (type uns32 eax));
		
		w.SendMessage( window.hstatus, w.SB_SETTEXT, 0, strbuf ); 
		
		// update insert/overwrite/visual mode notifiers
		if( info.ins_ovr ) then
			w.SendMessage( window.hstatus, w.SB_SETTEXT, 1, s_overwrite );
		else
			w.SendMessage( window.hstatus, w.SB_SETTEXT, 1, s_insert );
		endif;
		
		if( config.readBool( s_settings, s_readonly )) then
			w.SendMessage( window.hstatus, w.SB_SETTEXT, 2, s_r );
		else
			w.SendMessage( window.hstatus, w.SB_SETTEXT, 2, s_b );
		endif;
		
		if( info.mark.isSet ) then
			w.SendMessage( window.hstatus, w.SB_SETTEXT, 3, s_mark );
			
		else
			w.SendMessage( window.hstatus, w.SB_SETTEXT, 3, s_b );
		endif;
		
		movzx( info.mode, eax );
		switch( eax )
				
			case( MODE_EDITINI )
				str.put( tempstr, "Mode :Edit Configuration" );
				w.SendMessage( window.hstatus, w.SB_SETTEXT, 4, tempstr );

			case( MODE_VIEWDOCS )
				str.put( tempstr, "Mode :View Documentation" );
				w.SendMessage( window.hstatus, w.SB_SETTEXT, 4, tempstr );

			default
			
				// default will be insert mode
				str.put( tempstr, "Mode :Insert" );
				w.SendMessage( window.hstatus, w.SB_SETTEXT, 4, tempstr);
		endswitch;
		
		// window title may have changed somewhere along the line, update it
		setWindowTitle();
		
	end updateStatus;

	setTabWidth :procedure { @noframe, @returns("EAX") };
	
		// opens dialog to set tab width
	
	begin setTabWidth;
		w.DialogBoxParam( window.hinst, val ID_INPUT, window.hwnd, &Proc_Input, s_inputtab );
		if( return > 0 ) then
			try
				conv.strTou32( return, 0 );
				
			anyexception
				xor( eax, eax );
			endtry;
		else
			xor( eax, eax );
		endif;
		ret();
	end setTabWidth;

	getLineInfo :procedure(var line:LineInfo);
		
		// input expects a LineInfo structure with the
		// .line field containing the desired line information
		// will fill the rest of the structure.
		// returns 0 if no line is available
		
	begin getLineInfo;
		USE (EBX);
		mov( line, ebx );
		w.SendMessage( info.hred, w.EM_LINEINDEX, (type LineInfo [ebx]).number, 0 );
		if( (type int32 eax) >= 0 ) then
			mov( eax, (type LineInfo[ebx]).index );

			w.SendMessage( info.hred, w.EM_LINELENGTH, eax, 0 );
			mov( eax, (type LineInfo[ebx]).length );
		else
			xor( eax, eax );
		endif;
		ENDUSE;
	end getLineInfo;

	
	getInfo: procedure ( var inf:EditInfo );
	
		// collects informaiton about the edit state
		// and stores it in the info structure
	
	begin getInfo;

		push( edi );
		push( esi );
		mov( inf, edi );
		lea( esi, editedi.cursor );
		w.SendMessage( info.hred, w.EM_EXGETSEL, 0, esi );	
		w.SendMessage( info.hred, w.EM_EXLINEFROMCHAR, 0, charrangeesi.start_index );
		mov( eax, editedi.line.number );
		getLineInfo(editedi.line);
		mov( editedi.cursor.start_index, eax );
		sub( editedi.line.index, eax );
		mov( eax, editedi.column_index );
		w.SendMessage( info.hred, w.EM_GETLINECOUNT, 0, 0 );
		mov( eax, editedi.lines );

		pop( esi );
		pop( edi );

	end getInfo;

//bm=editcommands

	command_edit_ini	:procedure;
		
		// Load the configuration file and allow editing
		// set mode flag to inidcate ini file is being edited
		// this mode flag should be intercepted by the save file
		// command to reload the ini.
		
		// make sure we have already gotten confirmation to save any
		// existing work before calling this function
			
		
	begin command_edit_ini;
		
		str.cpy( config.fileName, info.filepath );
		str.rmvLastChar1( config.fileName );
		str.put2( config.fileName, "~" );
		config.writeFile();
		str.rmvLastChar1( config.fileName );
		str.put2( config.fileName, "i" );

		str.cpy( config.fileName, info.filepath );
		
		loadFile( info.filepath );
		mov( MODE_EDITINI, info.mode );
		updateStatus();
		
	end command_edit_ini;

	command_display_manual	:procedure { @noframe };
		
		// load the SavageEd.md which is saved as a
		// resource in SavageEd.exe
	
		// make sure we have already gotten confirmation to save any
		// existing work before calling this function
		
	begin command_display_manual;
		
		if( w.FindResource(window.hinst, val ID_SAVAGEED_MANUAL, val w.RT_RCDATA ) ) then

			if( w.LoadResource(window.hinst, eax ) ) then
				
				w.SendMessage( info.hred,w.WM_SETTEXT,0, eax );
				str.cpy( s_document, info.filepath );
				mov( MODE_VIEWDOCS, info.mode );
				updateStatus();
				w.SetFocus(info.hred);
				
			else
				
				jmp _error;	
				
			endif;
			
		else
			_error:
			Error("Couldn't Load Resource, file may be corrupted.", true);
			
			
		endif;
		ret();	

	end command_display_manual;


	command_get_line	:procedure( var line_buffer:dword );
		
		// copy the current line in the editor to buffer
		
	begin command_get_line;
		
		getInfo(info);
		dbg.put ("getting line:", info.line.number);
		
		mov( line_buffer, eax );
		mov( 3000, (type word [eax] ) );
		w.SendMessage( info.hred, w.EM_GETLINE, info.line.number, eax );
		
		// returns number of length of line copied in eax
		
	end command_get_line;

	command_get_word	:procedure {@noframe, @returns("EAX") };
	
		// returns the start and end of a word
		// in info.cursor.start_index and info.cursor.end_index
	
	begin command_get_word;
		command_get_line( &buffer );
		getInfo(info);
		
		// if we are sitting on a space, newline or tab char, don't do anything
		mov( &buffer, edx );
		add( info.column_index, edx );
		
		if( (type byte[edx]) = ' ' || (type byte[edx]) = $09 ||
		    (type byte[edx]) = $0a ) then
			xor( eax, eax );
			jmp done;
		endif;
		
		// find start index of word
		if( edx > &buffer ) then
			forever
				dec( edx );
				breakif( edx = &buffer );
				if( ((type byte [edx]) = ' ') || ((type byte[edx]) = $09) ) then
					inc( edx );
					break;
				endif;
			endfor;
		endif;
		
		// change buffer coordinate to info.hred coordinate
		sub( &buffer, edx );
		add( info.line.index, edx );
		mov( edx, info.cursor.start_index);
		
		// find end index of word
		mov( &buffer, edx );
		add( info.column_index, edx );
		forever
			inc( edx );
			breakif( (type byte[edx]) = 0 );
			breakif( (type byte[edx]) = $0d || (type byte[edx]) = $0a );
			if( ((type byte[edx]) = ' ') || ((type byte[edx]) = $09) ) then
				// eat the white space.
				inc( edx );
				break;
			endif;
		endfor;

		// change buffer coordinate to info.hred coordinate
		sub( &buffer, edx );
		add( info.line.index, edx );
		dbg.put("end index :", (type uns32 edx));
		mov( edx, info.cursor.end_index );
		
		or( 1, eax );
		done: ret();

	end command_get_word;

	command_delete_word	:procedure {@noframe};
	
		// delete the word under the cursor
		
	begin command_delete_word;
		if( command_get_word() ) then
			w.SendMessage( info.hred, w.EM_EXSETSEL, 0, &info.cursor );
			str.cpy("", strbuf );
			w.SendMessage( info.hred, w.EM_REPLACESEL, true, strbuf );
		endif;
		ret();
	end command_delete_word;


	command_copy_word :procedure {@noframe};
	begin command_copy_word;
		if( command_get_word() ) then
			w.SendMessage( info.hred, w.EM_EXSETSEL, 0, &info.cursor );
			w.SendMessage(info.hred, w.WM_COPY,0,0);			
		endif;
		ret();
	end command_copy_word;


	command_select_all :procedure {@noframe};
	begin command_select_all;
		mov	(0, info.cursor.end_index);
		mov	(-1,info.cursor.start_index);
		w.SendMessage(info.hred,w.EM_EXSETSEL,0,&info.cursor);
		ret();		
	end command_select_all;

	command_cut_line	:procedure {@noframe};
	begin command_cut_line;
		getInfo(info);
		mov( info.line.index, eax );
		mov( eax, info.cursor.start_index );
		add( info.line.length, eax );
		inc( eax ); // consume carriage return
		mov( eax, info.cursor.end_index );
		w.SendMessage( info.hred, w.EM_EXSETSEL, 0, &info.cursor );
		w.SendMessage(info.hred, w.WM_CUT,0,0);
		ret();
	end command_cut_line;


	command_cursor_up	:procedure;
		
		var
			queryLine	:LineInfo;
			
	begin command_cursor_up;
		if( info.saved_column_index = 0 ) then
			mov( info.column_index, eax );
			mov( eax, info.saved_column_index );
		endif;

		// if we are at line 0, no point in doing anything);
		if( info.line.number > 0 ) then
			mov( info.line.number, eax);
			dec( eax );
			mov( eax, queryLine.number );
			getLineInfo( queryLine ); // info of prev. line
			mov( info.saved_column_index, eax );
			if( queryLine.length >= eax ) then

				add( queryLine.index, eax );
				
			else
				mov( queryLine.length, eax );
				add( queryLine.index, eax );
			endif;
			w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
			w.SendMessage( info.hred, w.EM_SCROLLCARET, 0, 0);
		endif;
	end command_cursor_up;

	command_cursor_down	:procedure;
		
		var
			queryLine	:LineInfo;
			
	begin command_cursor_down;
							
		if( info.saved_column_index = 0 ) then
			mov( info.column_index, eax );
			mov( eax, info.saved_column_index );
		endif;
	
		mov( info.line.number, eax );
		inc( eax );
		if( eax < info.lines ) then
			mov( eax, queryLine.number );
			getLineInfo( queryLine );
			
			mov( info.saved_column_index, eax );
			if( queryLine.length >= eax ) then
				
				add( queryLine.index, eax );
				
			else
				mov( queryLine.length, eax );
				add( queryLine.index, eax );
			endif;
			w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
			w.SendMessage( info.hred, w.EM_SCROLLCARET, 0, 0);
		endif;
	end command_cursor_down;

	command_cursor_left	:procedure {@noframe};
	begin command_cursor_left;
		
		dbg.put("cursor_left")
		mov( info.cursor.start_index, eax );
		if( eax ) then
			dec( eax );
			w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
			w.SendMessage( info.hred, w.EM_SCROLLCARET, 0, 0);
		endif;
		ret();
	end command_cursor_left;

	
	command_cursor_right	:procedure {@noframe};
	begin command_cursor_right;
		
		dbg.put("cursor_right");
		mov( info.cursor.start_index, eax );
		inc( eax );
		
		w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
		w.SendMessage( info.hred, w.EM_SCROLLCARET, 0, 0);
		ret();
	end command_cursor_right;


	command_move_to_bol	:procedure {@noframe};
	begin command_move_to_bol;
		
		mov( info.line.index, eax );
		if( info.column_index = 0 && eax > 0 ) then
			
			// we're at the beginning of line, go to the beginning of prev line.
			
			dec (eax );
			w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
		endif;
		w.SendMessage( info.hred, w.EM_SETSEL, info.line.index, info.line.index );
		ret();
	end command_move_to_bol;

	command_move_to_eol	:procedure {@noframe};
	begin command_move_to_eol;

		mov( info.line.length, eax );
		if( info.column_index = eax ) then
			
			// we're at the end of line, go to the end of next line.
			add( info.line.index, eax );
			inc( eax ); // go over the carriage return
			w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
			//getInfo(info);
		endif;
		mov( info.line.length, eax );
		add( info.line.index, eax );
		w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
		ret();

	end command_move_to_eol;


	command_toggle_mark :procedure {@noframe};
	begin command_toggle_mark;
		
		dbg.put("toggle_mark");
		
		if( info.mark.isSet ) then
			
			// close mark and set selection
			// find the start and end of the selection
			
			mov( info.mark.index, eax );
			if( eax < info.cursor.start_index ) then
				push( info.cursor.start_index );
				mov( eax, info.cursor.start_index );
				pop( info.cursor.end_index );
			else
				mov( eax, info.cursor.end_index );
			endif;
			
			w.SendMessage( info.hred, w.EM_EXSETSEL, 0, &info.cursor );
			
		else
			
			// start a mark
			mov( info.cursor.start_index, eax );
			mov( eax, info.mark.index );
			
		endif;
	
		// toggle mark
		xor( 1, info.mark.isSet );
		ret();

	end command_toggle_mark;

	command_increase_indent :procedure;
	
		// increase indent by adding a tab at bol
		// or strtabs string at bol
		// depending on user settings
		// adjust cursor to maintain relative position.
		
		var
			line		:LineInfo;
			char_index	:dword;
			n_tab		:dword;
			
	
	begin command_increase_indent;
		w.LockWindowUpdate(info.hred);
		
		push( info.column_index );
		pop( char_index );
		
		push( info.line.number );
		pop( line.number );
		getLineInfo( line );	
		
		w.SendMessage( info.hred, w.EM_SETSEL, line.index, line.index );
		
		if( config.readBool( s_settings, s_tabsasspace ) ) then
			str.cpy( strtabs, strbuf );
			mov( str.length(strtabs), n_tab );
		else
			str.cpy( "	", strbuf );
			mov( 1, n_tab );
		endif;

		w.SendMessage( info.hred, w.EM_REPLACESEL, true, strbuf );
		mov( line.index, eax );
		add( n_tab, eax );
		add( char_index, eax );
		w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
		w.LockWindowUpdate( NULL );

	end command_increase_indent;

	command_reduce_indent :procedure;
	
		// reducs the indent by checking the beginning of the
		// line for tab or space.
		// if tab is found, reduce by 1 char
		// if space is found, reduce by strtabs length of chars
		
		var
			line		:LineInfo;
			cp_min		:dword;
			
			
	begin command_reduce_indent;
		w.LockWindowUpdate(info.hred);
		
		push( info.line.number );
		pop( line.number );
		getLineInfo( line );
		push( info.cursor.start_index );
		pop( cp_min );		
		command_get_line(&buffer);
		if( buffer[0] = $09 ) then
			mov( 1, ecx );
		elseif( buffer[0] = ' ' ) then
			mov( str.length(strtabs), eax );
			for( xor( ecx, ecx ); ecx < eax; inc( ecx ) ) do
				breakif (buffer[ecx] != ' ' );
			endfor;
		else
			xor( ecx, ecx );
		endif;
		
		if( ecx ) then
			push( ecx );
			mov( line.index, eax );
			add( eax, ecx );
			w.SendMessage( info.hred, w.EM_SETSEL, eax, ecx );
			str.cpy("", strbuf );
			w.SendMessage( info.hred, w.EM_REPLACESEL, true, strbuf );
			pop( ecx );
		endif;
		
		// adjust the cursor position to maintain it's relative
		// position on the line
		// make sure we don't end up on the previous line

		mov( cp_min, eax );
		if( eax != line.index ) then
			sub( ecx, eax );
			if( eax < line.index ) then
				mov( line.index, eax );
			endif;
		endif;

		w.SendMessage( info.hred, w.EM_SETSEL, eax, eax);
		w.LockWindowUpdate(NULL);
		
	end command_reduce_indent;

	
	Msg_Command :procedure( hwin:dword; wparam:dword; lparam:dword );
	
		// handle menu commands
	
	begin Msg_Command;
		mov	(wparam,eax);
		and	($0ffff,eax);
		
		switch( eax );
		case( IDM_NEW )
			
			getConfirm();
			if (!eax) then	
				
				w.SetWindowText( info.hred, 0 );		// clear edit window
				str.cpy( s_untitled, info.filepath );
				mov( MODE_INSERT, info.mode );
				updateStatus();
				
			endif;
			w.SetFocus(info.hred);
		
		case( IDM_OPEN )
		
			getConfirm();
			if (!eax) then
			
				fileOpen(); 
	
			endif;	
			w.SetFocus(info.hred);
			
		case( IDM_INST )
			
			newInstance( NULL );
			
		case( IDM_SAVE )
		
			checkSave();
			w.SetFocus(info.hred);
			
		case( IDM_SAVEAS )
		
			SaveAs();
			w.SetFocus(info.hred);
			
		case( IDM_SAVE_SELECTION_AS )
		
			SaveSelectionAs();
			w.SetFocus(info.hred);
			
	   	case( IDM_CUT )
		
			w.SendMessage(info.hred, w.WM_CUT,0,0);
			
		case( IDM_COPY )
		
			w.SendMessage(info.hred, w.WM_COPY,0,0);
			
		case( IDM_PASTE )
		
			w.SendMessage(info.hred, w.WM_PASTE,0,0);
			w.SendMessage(info.hred, w.EM_SETMODIFY, true,0); 	
			
		case( IDM_SELECTALL )
			
			command_select_all();
			
		case( IDM_UNDO )
		
			w.SendMessage(info.hred, w.EM_UNDO,0,0);
			
		case( IDM_REDO )
		
			w.SendMessage(info.hred, w.EM_REDO,0,0);
			
		case( IDM_FIND, IDM_REPLACE )
			if (!window.hfind) then
				GetSelText (&findbuf);
				w.CreateDialogParam(window.hinst,val ID_FINDDLG,hwin, &Proc_FindDlg,false);
			else
				w.SetFocus(window.hfind);
			endif;
		
		case( IDM_FINDNEXT )
			
			mov( true, info.find_mode.down );
			
			if (! window.hfind) then
				GetSelText(&findbuf);
			endif;
			mov( findbuf[0], al );
			test(al,al);
			if (@nz) then
				Find(); //(w.FR_DOWN);
			endif;
			
		case(IDM_FINDPREV )
			
			mov( false, info.find_mode.down );
			
			if (! window.hfind) then
				GetSelText(&findbuf);
			endif;
			mov (findbuf[0], al);
			test(al,al);
			if (@nz) then
				Find(); //(0);
			endif;
			
		case( IDM_EDIT_GOTO )
			
			w.DialogBoxParam( window.hinst, val ID_INPUT, hwin, &Proc_Input, s_inputlinen );
			if( return > 0 ) then
				
				dbg.put("query :", return );
				
				try
					conv.strTou32( return, 0 );
					dec(eax);
					w.SendMessage( info.hred, w.EM_LINEINDEX, eax, 0 );
					w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
					w.SendMessage( info.hred, w.EM_SCROLLCARET, 0, 0 );
					
				anyexception
					
					str.put( hide.strbuf, "Can't go to line ", return );
					Error( hide.strbuf, true );
					
				endtry;
					
				str.free( return );
				mov( 0, return );
				
			endif;
			
		case( IDM_TIME )
	
			command_insert_time();
			
		case( IDM_FONT )
		
			selectFont();
			w.SetFocus(info.hred);
			
		case( IDM_FORGROUND )
			
			if( selectColor() )  then
				move( return, window.textColor );
				config.writeHex( s_text, s_text_color, window.textColor);
				setFormat();
			endif; 
			w.SetFocus(info.hred);
			
		case( IDM_BACKGROUND )
	
			if( selectColor() ) then
				move( return, window.backColor );
				config.writeHex( s_text, s_background_color, window.backColor);
				setFormat();
			endif;
			w.SetFocus(info.hred);
			
		case(IDM_AUTO ) 
			
			if( config.readBool( s_settings, s_autosave ) ) then
			
				w.CheckMenuItem( window.hmenu, IDM_AUTO, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				mov( false, eax );
				
			else
				
				w.CheckMenuItem( window.hmenu, IDM_AUTO, w.MF_BYCOMMAND | w.MF_CHECKED );
				mov( true, eax );
				
			endif;
			
			config.writeBool( s_settings, s_autosave, al );
			
		case(  IDM_AUTOINDENT ) 
			
			if( config.readBool( s_settings, s_autoindent ) ) then
			
				w.CheckMenuItem( window.hmenu, IDM_AUTOINDENT, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				mov( false, eax );
				
			else
				
				w.CheckMenuItem( window.hmenu, IDM_AUTOINDENT, w.MF_BYCOMMAND | w.MF_CHECKED );
				mov( true, eax );
				
			endif;
			
			config.writeBool( s_settings, s_autoindent, al );
		
		case( IDM_EDITINI )
			
			dbg.put("edit the ini file");
			getConfirm();
			if (!eax) then
			
				command_edit_ini(); 
	
			endif;	

		case ( IDM_WRAP) 

			if( config.readBool( s_settings, s_wrap ) ) then

				w.CheckMenuItem( window.hmenu, IDM_WRAP, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				mov( false, eax );
				
			else
				
				w.CheckMenuItem( window.hmenu, IDM_WRAP, w.MF_BYCOMMAND | w.MF_CHECKED );
				mov( true, eax );
				
			endif;
			config.writeBool( s_settings, s_wrap, al );
			if( eax ) then
				w.SendMessage( info.hred, w.EM_SETTARGETDEVICE, NULL, 0 );
			else
				w.SendMessage( info.hred, w.EM_SETTARGETDEVICE, NULL, 1 );
			endif;
			
		case ( IDM_READONLY) 
			
			if( config.readBool( s_settings, s_readonly ) ) then

				w.CheckMenuItem( window.hmenu, IDM_READONLY, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				mov( false, eax );
				
			else
				
				w.CheckMenuItem(window.hmenu, IDM_READONLY, w.MF_BYCOMMAND | w.MF_CHECKED);
				mov( true, eax );
				
			endif;
			config.writeBool( s_settings, s_readonly, al );
			w.SendMessage( info.hred, w.EM_SETREADONLY, eax, 0 );
			updateStatus();
			
		case ( IDM_CLEAREXIT) 

			if( config.readBool( s_settings, s_clearexit ) ) then

				w.CheckMenuItem( window.hmenu, IDM_CLEAREXIT, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				mov( false, eax );
			else
				
				w.CheckMenuItem(window.hmenu, IDM_CLEAREXIT, w.MF_BYCOMMAND | w.MF_CHECKED);
				mov( true, eax );
			endif;
			config.writeBool( s_settings, s_clearexit, al );
			
		case ( IDM_RECENTNEW) 
			
			if( config.readBool( s_settings, s_recentnew ) ) then

				w.CheckMenuItem( window.hmenu, IDM_RECENTNEW, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				mov( false, eax );
				
			else
				
				w.CheckMenuItem(window.hmenu, IDM_RECENTNEW, w.MF_BYCOMMAND | w.MF_CHECKED);
				mov( true, eax );
				
			endif;
			config.writeBool( s_settings, s_recentnew, al );
			
		case ( IDM_OPENRECENT) 

			if( config.readBool( s_settings, s_openrecent ) ) then

				w.CheckMenuItem( window.hmenu, IDM_OPENRECENT, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				mov( false, eax );
				
			else
				
				w.CheckMenuItem(window.hmenu, IDM_OPENRECENT, w.MF_BYCOMMAND | w.MF_CHECKED);
				mov( true, eax );
				
			endif;
			config.writeBool( s_settings, s_openrecent, al );
			
		case(  IDM_REMEMBERPOS ) 
		
			if( config.readBool( s_settings, s_rememberpos ) ) then

				w.CheckMenuItem( window.hmenu, IDM_REMEMBERPOS, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				mov( false, eax );
				
			else
				
				w.CheckMenuItem(window.hmenu, IDM_REMEMBERPOS, w.MF_BYCOMMAND | w.MF_CHECKED);
				mov( true, eax );
				
			endif;
			config.writeBool( s_settings, s_rememberpos, al );
			
		case ( IDM_PEG) 

			if( config.readBool( s_settings, s_topwindow ) ) then

				w.CheckMenuItem( window.hmenu, IDM_PEG, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				w.SetWindowPos(hwin,w.HWND_NOTOPMOST,0,0,0,0,3);
				mov( false, eax );
				
			else
				
				w.CheckMenuItem(window.hmenu, IDM_PEG, w.MF_BYCOMMAND | w.MF_CHECKED);
				w.SetWindowPos(hwin,w.HWND_TOPMOST,0,0,0,0,3);
				mov( true, eax );
				
			endif;
			config.writeBool( s_settings, s_topwindow, al );
		
		case(  IDM_SETTAB ) 
			
			if( setTabWidth() ) then
				config.writeUns( s_settings, s_tabs, eax );
				setFormat();
			endif;
			
		case( IDM_TAB_AS_SPACE )
		
			if( config.readBool( s_settings, s_tabsasspace ) ) then

				w.CheckMenuItem( window.hmenu, IDM_TAB_AS_SPACE, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				mov( false, eax );
					
			else
				
				w.CheckMenuItem(window.hmenu, IDM_TAB_AS_SPACE, w.MF_BYCOMMAND | w.MF_CHECKED);
				mov( true, eax );
				
			endif;
			config.writeBool( s_settings, s_tabsasspace, al );			
			
		case(  IDM_VIEW_STATUS ) 
			
			if( config.readBool( s_window, s_status ) ) then
				
				config.writeBool( s_window, s_status, false );
				w.CheckMenuItem( window.hmenu, IDM_VIEW_STATUS, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				w.ShowWindow( window.hstatus, false );
				
			else
				
				config.writeBool( s_window, s_status, true );
				w.CheckMenuItem( window.hmenu, IDM_VIEW_STATUS, w.MF_BYCOMMAND | w.MF_CHECKED );
				w.ShowWindow( window.hstatus, true );
				
			endif;
			w.SendMessage( hwin, w.WM_SIZE, 0, 0 );
			
		case ( IDM_ABOUT) 
		
			w.CreateDialogParam(window.hinst,val ID_ABOUT,hwin,&AboutDlgProc,0);
	
		case ( IDM_DOCUMENTS) 
			
			getConfirm();
			if (!eax) then
			
				command_display_manual(); 
	
			endif;	
	
		case( IDM_QUIT ) 
		
			 w.SendMessage(hwin,w.WM_CLOSE,0,0);
		
		default;
			if( eax >= RECENT_MENU_START && eax <= RECENT_MENU_END ) then
				openRecent( eax );
			endif;
		endswitch;
		
		xor( eax, eax );

	end Msg_Command;

begin SavageEd;

	dbg.cls;
	initConfig();
	initWindow();
	mov( MODE_INSERT, info.mode );
	cmp( eax, 0 );
	je _exit;
		
	FOREVER
		w.GetMessage(window.msg,NULL,0,0);
		breakif( ! eax );
		w.IsDialogMessage( window.hfind, window.msg );
		continueif( eax );
		w.IsDialogMessage( window.habout, window.msg );
		continueif( eax );
		w.TranslateMessage( window.msg );
		w.DispatchMessage( window.msg );		
	ENDFOR;
	
	// tail free some resources
	// unnecessary, but helpful to know what needs to be freed in case
	// we decide to move things around later
	w.DestroyWindow( info.hred );
	w.DeleteObject( info.hfont );
	w.FreeLibrary(window.hredDLL);
	str.free( info.filepath );

	mov( window.msg.wParam, eax );

	_exit:

end SavageEd;
