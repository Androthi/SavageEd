///		Goals for v.0.7.xx
///	[X]	Subclass the richedit control
///	[X]	Move keyboard processing control to the subclassed proc
///	[ ]	Isolate the edit structure to prepare for multi-buffers
///
///		these are 'maybe' features
/// [ ]	Allow user to customize keys
/// [ ] remove the options from menu and allow user to edit
///		SavageEd.ini directly in the editor.
///		this might require rethinking some of the .ini setup

program SavageEd;

	#include("SavageEd.hhf")

	?@nodisplay :=true;
	?@nostackalign := true;

	
proc

	Error :procedure( error_msg:string; warning:boolean );

		// quick message box for critical errors and warnings reporting

	begin Error;
	
		if( warning ) then
			
			w.MessageBox( NULL, error_msg, "Warning", w.MB_OK | w.MB_ICONWARNING );
		
		else
			
			w.MessageBox(NULL,error_msg,"ERROR",w.MB_OK | w.MB_ICONERROR );
			
			cmp(window.hwnd,0);
			je _nowindow;
			w.PostQuitMessage(0);
			exit Error;
			
		_nowindow:
			xor(eax,eax);
			
		endif;
	
	end Error;

	getTempName :procedure( prefix:string; ext:string; dest:string );
	
		// gets a temp name based on current directory
		// format:
		// curdir\prefixxxxxxxxxext
	
	begin getTempName;
		
		// doubt there will ever be a similar result, but just in case...
		forever
			w.GetTickCount();
			conv.u32ToStr( eax, 20, ' ', hide.strbuf );
			str.trim( hide.strbuf );
			filesys.gwd( dest );
			str.put2( dest, chars.dir_sep, prefix, hide.strbuf, ext );
			
			breakif( ! filesys.exists( dest ) );
		endfor;
		
	end getTempName;

	Msg_SetFocus :procedure( hwin:dword; wparam:dword; lparam:dword );
	
		// set window focus to active editor control
	
	begin Msg_SetFocus;
		
		w.SetFocus( info.hred );
		xor( eax, eax );
		
	end Msg_SetFocus;

	
	Msg_Size :procedure( hwin:dword; wparam:dword; lparam:dword );
		
		// size the main window
		
		var
			rect	:w.RECT;
			height	:dword;

	begin Msg_Size;
		
		w.GetClientRect( window.hwnd, rect );
		mov( rect.bottom, eax );
		sub( rect.top, eax );
		mov( eax, height );
		
		if( config.readBool( s_window, s_status ) ) then
		
			sub( statusht_c, height );
			w.SendMessage( window.hstatus, w.WM_SIZE, 0, 0 );

		endif;
		w.MoveWindow( info.hred, 0, rect.top, rect.right, height, true );
		
		xor( eax, eax );
		
	end Msg_Size;
		
	
	setWindowTitle :procedure {@noframe};
	
		// set the window title
		// called anytime the title needs to be changed or updated
	
	begin setWindowTitle;
		
		filesys.extractFilename( filepath, hide.strbuf );
		if(info.hred) then
			if (w.SendMessage(info.hred, w.EM_GETMODIFY,0,0)) then
				str.insert("*",0, hide.strbuf);
			endif;
		endif;
		w.SetWindowText( window.hwnd, hide.strbuf );
		ret();

	end setWindowTitle;
	
	StreamInProc :procedure( var pBytesRead:dword ; NumBytes:dword ; var pbuffer:dword ; _hFile:dword );	

		// read file into edit buffer

	begin StreamInProc;
		
		w.ReadFile( _hFile, pbuffer, NumBytes, pBytesRead, NULL );
		xor	(1, eax);
	
	end StreamInProc;

	StreamOutProc :procedure( var pBytesRead:dword ; NumBytes:dword ; var pbuffer:dword ; _hFile:dword );
	
		// output edit buffer into file
	
	begin StreamOutProc;
		
		w.WriteFile( _hFile, pbuffer, NumBytes, pBytesRead, NULL );
		xor	(1, eax);

	end StreamOutProc;

	saveFile :procedure( filename:string; save_selection:boolean );

		// saves contents of edit buffer or selection to file
		var
			hfile	:dword;
			

	begin saveFile;
		
		filesys.extractExt( filename, strbuf );
		
		try
			fileio.openNew( filename );
			mov( eax,hfile );
			mov( eax, editstream.dwCookie );
			mov( &StreamOutProc, editstream.pfnCallback );
			mov( w.SF_TEXT, eax );
			if( save_selection ) then
				or( w.SFF_SELECTION, eax );
			endif;
			w.SendMessage( info.hred, w.EM_STREAMOUT, eax, &editstream );
			fileio.close( hfile );
			w.SendMessage(info.hred, w.EM_SETMODIFY, false, 0);
			mov( false,eax );
			
		anyexception
			
			Error( s_nosave, true );
			mov( true, eax );
			
		endtry;
		push( eax );
		updateRecentLog();
		setWindowTitle();
		pop( eax );
		done:
		
	end saveFile;
	
	getFileName	:procedure;
	
		// copies the current filename into buffer
		var
			ofn	:w.OPENFILENAME;
			
	
	begin getFileName;
		lea( ofn, eax );
		w.RtlZeroMemory( eax, @size(ofn) );
		mov( @size(ofn), ofn.lStructSize );
		mov( window.hwnd, ofn.hWndOwner );
		mov( hinst, ofn.hInstance );
		mov( &curdir, eax );
		mov( eax, ofn.lpstrInitialDir );
		
		zstr.cpy( (type zstring filepath ), &buffer );
		mov( &buffer, eax );
		mov( eax, ofn.lpstrFile );
		mov( s_savetitle, eax );
		mov( eax, ofn.lpstrTitle );
		mov( @elements(buffer)-1, ofn.nMaxFile );
		mov( w.OFN_EXPLORER | w.OFN_LONGNAMES | w.OFN_OVERWRITEPROMPT, ofn.Flags );
		
		dbg.put("ofn");
		w.GetSaveFileName( ofn );
	//	ret();
	end getFileName;

	SaveAs :procedure {@noframe};
	
		// save the current file under a new name
		// new name becomes default
	
	begin SaveAs;
		
		getFileName();
		if(eax) then
			
			str.cpyz( &buffer, filepath );
			saveFile( filepath, false );
			if(eax) then
			 	// reset FileName to untitled
			 	str.cpy( s_untitled, filepath );

			endif; 
			
			setWindowTitle();
			xor( eax, eax );
			
		else
			
			mov(-1,eax);
			
		endif;
		ret();
	end SaveAs;

	SaveSelectionAs :procedure {@noframe};
	
		// save selected text with new name
		// does not change current document.
	
	begin SaveSelectionAs;
		
		getFileName();	
		if(eax) then
			
			str.cpyz( &buffer, hide.strbuf );
			saveFile( hide.strbuf, true );
		endif;
		ret();
	end SaveSelectionAs;


	checkSave :procedure { @noframe };
	
		// checks to see if the current document has a title
		// if not, it will generate a random name if that
		// option is on.
	
	begin checkSave;
		
		if( str.ieq( filepath, s_untitled ) ) then
			
			if( config.readBool( s_settings, s_autosave ) ) then
				
				getTempName( s_untitled, s_txtext, filepath );
				mov( 0, eax );
			else
				
				SaveAs();
				
			endif;
		else
			
			mov( 0, eax );
			
		endif;
		
		if( ! eax  ) then
			saveFile( filepath, false );
		endif;
		setWindowTitle();
		
		ret();
	end checkSave;
	
	getConfirm :procedure { @noframe, @returns("EAX") };

		// checks for modified file, gets confirmation from user

	begin getConfirm;
		w.SendMessage(info.hred, w.EM_GETMODIFY,0,0);
		if (eax) then
			if( config.readBool( s_settings, s_autosave ) ) then

				checkSave();
				mov( false, eax );
			
			else
				
				w.MessageBox(window.hwnd, filepath, s_savechanges, w.MB_YESNOCANCEL | w.MB_ICONQUESTION);
				if( eax=w.IDYES ) then
						
					checkSave();
					xor( eax, eax );
					
				elseif (eax=w.IDNO) then
			
					xor( eax, eax );
			
				else
			 
					mov( true, eax );
					
				endif;
				
			endif;
		else
			
			xor( eax, eax );
			
		endif;
		ret();
	end getConfirm;

	
	setFormat :procedure;
		
		// initializes a new edit buffer
		// sets background and foreground colors
		// sets font and margins
		// sets tab width
		
		var
			cf	:w.CHARFORMAT2;
			tm	:w.TEXTMETRIC;	
			
	begin setFormat;
		
		w.SendMessage(info.hred, w.EM_GETMODIFY,0,0);
		push( eax );
		w.SendMessage(info.hred, w.EM_EXLIMITTEXT,0,-1);
		
		lea (eax, cf);
		w.RtlZeroMemory (eax, @size(cf));
		mov	(@size(cf), cf.cbSize);
		mov	(w.CFM_CHARSET | w.CFM_FACE | w.CFM_SIZE | w.CFM_COLOR, cf.dwMask);
		mov	(logfont.lfCharSet, al);
		mov	(al,cf.bCharSet);
		mov	(logfont.lfPitchAndFamily, al);
		mov	(al, cf.bPitchAndFamily);
		w.lstrcpyn(cf.szFaceName,&logfont.lfFaceName,w.LF_FACESIZE);
		mov	(logfont.lfHeight, eax);
		neg	(eax);
		mov	(15,ecx);
		mul (ecx);
		mov	(eax, cf.yHeight);
		push (window.textColor);
		pop (cf.crTextColor);
		w.SendMessage( info.hred, w.EM_SETBKGNDCOLOR, false, window.backColor);
		w.SendMessage( info.hred, w.WM_SETFONT, info.hfont, true );
	
		
		w.GetDialogBaseUnits();
		movzx( ax, ecx );
		str.cpy( "", strtabs );
		config.readUns( s_settings, s_tabs );
		push( eax );
		// fill the tabs as spaces string
		while( eax ) do
			str.cat( " ", strtabs );
			dec( eax ); 
		endwhile;
		pop( eax );
		
		mul( ecx );
		shr( 1, eax );
		mov( eax, info.tabs );
		dbg.put("tabs :", info.tabs );
		w.SendMessage(info.hred, w.EM_SETTABSTOPS, 1, &info.tabs );
		
		w.SendMessage( info.hred, w.EM_SETMARGINS, w.EC_LEFTMARGIN | w.EC_RIGHTMARGIN, 5<<16 | 5 );
		
		lea(eax, cf);
		w.SendMessage( info.hred, w.EM_SETCHARFORMAT, w.SCF_ALL, eax );
		pop	(eax);
		w.SendMessage( info.hred, w.EM_SETMODIFY, eax,0 );
		
	end setFormat;

	GetSelText :procedure( lpBuff:dword );
	
		// gets the selected text range for use
		// with find
	
	begin GetSelText;
	
		mov( lpBuff, eax );
		mov( eax, find_range.lpstrText );
		
		w.SendMessage(info.hred, w.EM_EXGETSEL,0, &find_range.chrg);
		mov	(find_range.chrg.cpMax,eax);
		sub	(find_range.chrg.cpMin,eax);
		if( eax >= @elements( findbuf ) ) then
			mov( @elements( findbuf) -1, find_range.chrg.cpMax );
		endif;
		
		w.SendMessage(info.hred, w.EM_GETTEXTRANGE,0,&find_range);
	
	end GetSelText;
		
	AboutDlgProc :procedure( lParam:dword; wParam:dword; uMsg:uns32; hDlg:dword);
	
		// opens a window to display version number
	
	begin AboutDlgProc;
		
		if (uMsg = w.WM_INITDIALOG) then
			mov	(hDlg, window.habout);
			w.SetDlgItemText( window.habout,ID_ABOUTGRP,version ); 
			w.SetFocus(window.habout);
			
		elseif (uMsg = w.WM_COMMAND) then
			 if (wParam = w.IDOK || wParam= w.IDCANCEL) then				

			 	w.SendMessage(hDlg, w.WM_CLOSE,NULL,NULL);

			 endif;
		elseif (uMsg = w.WM_CLOSE) then

			w.DestroyWindow(window.habout);
			mov	(0, window.habout);
			w.SetFocus(info.hred);
		
		else
			mov (false, eax);
			exit AboutDlgProc;
		endif;
	
		mov (true, eax);	
		
	end AboutDlgProc;
		
	command_insert_time :procedure;
	
		// inserts date/time at cursor
		var systime		:w.SYSTEMTIME;

	begin command_insert_time;
	
		w.GetSystemTime(systime);
		w.GetDateFormat(	w.LOCALE_USER_DEFAULT,
						w.LOCALE_NOUSEROVERRIDE,
						NULL,	// systemtime
						NULL,	// format
						&buffer,
						@size(buffer));
		mov( ' ', buffer[eax-1] );
		mov( #$0, buffer[eax] );
		w.SendMessage(info.hred, w.EM_REPLACESEL, true, &buffer);
		
		w.GetTimeFormat(	w.LOCALE_USER_DEFAULT,
						w.LOCALE_NOUSEROVERRIDE,
						NULL,
						NULL,
						&buffer,
						@size(buffer));
		w.SendMessage(info.hred, w.EM_REPLACESEL, true, &buffer);
	
	end command_insert_time;
		
	
	JumpLog :procedure 
		
		// inserts the date/time in the editor
		// either at the top of the file, or appends to the bottem
		// direction is determined in al
		
		{@noframe};
	begin JumpLog;
	
		if (al='<') then	// append at top
			w.SendMessage( info.hred,w.EM_SETSEL,5,5 );
			
		else				// append at bottom
			w.SendMessage( info.hred,w.EM_SETSEL,-1,-1 );
		endif;
		w.SendMessage( info.hred, w.EM_REPLACESEL,true, s_nl );
		command_insert_time();
		w.SendMessage( info.hred, w.EM_REPLACESEL,true, s_nl );
		ret();
		
	end JumpLog;
	

	checkLog :procedure{ @noframe };

		// looks at the top of the file to determine is
		// the user desires logging
		// looks for .LOG message on top of loaded file.
		// optionally, there may be a direction determined by
		// '<' this is loaded into al and control passed to JumpLog();

	begin checkLog;
		//dbg.put ("CheckLog");
		mov( 0, find_range.chrg.cpMin );
		mov( 5, find_range.chrg.cpMax );
		mov( &buffer,find_range.lpstrText );
		w.SendMessage( info.hred, w.EM_GETTEXTRANGE, 0, &find_range);
		mov(&buffer,esi);
		lodsd();
		if ( eax = $474f4c2e ) then	// .LOG
			// check direction
			lodsb();
			JumpLog();
			w.SendMessage( info.hred, w.EM_SETMODIFY, false, 0 );
		endif;
		ret();
	end checkLog;

	newInstance :procedure( filename:string );
		
		// opens a new instance of SavageEd
		
		var
			s	:string;
			
	
	begin newInstance;
		dbg.put("newInstance" );
		
		move( str.talloc( 300 ), s );
		add( 20,window.xPos );
		config.writeUns( s_window, "xPos",window.xPos );
		add( 20,window.yPos );
		config.writeUns( s_window, "yPos",window.yPos );
		config.writeUns( s_window, "width",window.width);
		config.writeUns( s_window, "height",window.height);
		
		getConfigPath( s );
		config.writeFileName( s );
		
		w.GetModuleFileName( NULL, &buffer, @size(buffer) );
		str.cpyz( &buffer, s );
		if( filename != NULL ) then
			str.put2( s, ' ', filename );
		endif;
		os.bkgnd( s );
		
	end newInstance;

	selectFont :procedure;

		// handles Font selection
		static	cf:w.CHOOSEFONT;

	begin selectFont;
	
		w.RtlZeroMemory( &cf, @size(cf) );
		mov( @size(cf), cf.lStructSize );
		mov( window.hwnd, eax );
		mov( eax, cf.hWndOwner );
		mov( &logfont, cf.lpLogFont );
		mov( w.CF_SCREENFONTS | w.CF_EFFECTS | w.CF_INITTOLOGFONTSTRUCT, cf.Flags );
		push( window.textColor );
		pop( cf.rgbColors );
		
		w._ChooseFont(cf);
		if (eax) then
		
			w.DeleteObject(info.hfont);
			w.CreateFontIndirect(logfont);
			mov( eax, info.hfont );
			push( cf.rgbColors );
			pop( window.textColor );
			setFormat();
			config.writeHex( s_text, s_background_color, window.backColor);
			config.writeHex( s_text, s_text_color, window.textColor);
			config.writeBin( s_text, s_font, &logfont, @size( logfont ) );
			
		endif;
	end selectFont;
	
	selectColor :procedure { @returns("EAX") };
		
		// color picker
		static 	cc			:w.CHOOSECOLOR;
		
	begin selectColor;
		dbg.put ("selectColor");
		mov( &cc, eax );
		w.RtlZeroMemory( eax, @size(w.CHOOSECOLOR) );
		mov( @size (cc), eax );
		mov( eax, cc.lStructSize );
		push(window.hwnd );
		pop( cc.hwndOwner );
		push( hinst );
		pop( cc.hInstance );
		mov( w.CC_RGBINIT, cc.Flags );
		mov( &customColors, cc.lpCustColors);
		push( window.backColor );
		pop( cc.rgbResult );
		mov( &cc, eax );
		w._ChooseColor( &cc );
		dbg.put("choose color :", eax );
		if( eax ) then
			push( cc.rgbResult );
			pop( return );	// black color can be zero so we'll use this to return color value
			config.writeBin( s_text, s_custcolors, &customColors, @size( customColors ) );
			or( 1, eax );
		endif;

	end selectColor;

	updateMenu :procedure;	
	
		// updates the recent files menu
		// based on user options
	
		var
			count	:uns32;
			
	begin updateMenu;
		pushabi;
		//dbg.put("updateMenu");
		if( window.hsubmenu <> 0 ) then
			w.DestroyMenu( window.hsubmenu );
			mov( 0, window.hsubmenu );
		endif;
			
		w.CreatePopupMenu();
		mov( eax, window.hsubmenu );
		mov( RECENT_MENU_START, ebx );
		config.getItemCount( s_recent );
		mov( eax, count );
		
		for( mov( 0, ecx ); ecx < count; inc( ecx ) ) do
			
			if( config.readItem( s_recent, ecx, hide.strbuf ) ) then
				USE( ECX, EBX );
				w.AppendMenu( window.hsubmenu, w.MF_BYPOSITION | w.MF_ENABLED | w.MF_STRING,
							ebx, hide.strbuf);
				ENDUSE;
			endif;
			inc( ebx );
		endfor;
		
		w.GetMenu( window.hwnd );
		w.GetSubMenu( eax, 0 );
		w.ModifyMenu( eax, 8, w.MF_BYPOSITION | w.MF_POPUP| w.MF_ENABLED,
					window.hsubmenu, s_recent );
		w.DrawMenuBar( window.hwnd );
		
		//dbg.put("/updateMenu");
		popabi;
	end updateMenu;
	
	openRecent :procedure(id:dword);
	
		// opens a recent file
		// may start a new instance, based on user options
		
		var
			s	:string;
			
	begin openRecent;
		//dbg.put("openRecent" );
		move( str.talloc( 300 ), s );
		getConfirm();
		if (! eax) then
			w.GetMenu( window.hwnd );
			w.GetMenuStringA( eax, id, buffer, @elements( buffer ), w.MF_BYCOMMAND );
			str.cpyz( &buffer, s );
			
			if( config.readBool( s_settings, s_recentnew )) then
				
				newInstance( s );
				
			else
				
				loadFile( s );
				if( ! eax ) then
					config.findItem( s_recent, s );
					config.deleteItem( s_recent, eax );
					updateMenu();
				endif;
				
			endif;
			
		endif;
	
	end openRecent;

	updateRecentLog :procedure {@noframe};
	
		// update the recent log and menu
	
	begin updateRecentLog;
		//dbg.put("updateRecentLog");
		if( config.findItem ( s_recent, filepath ) <> -1 ) then
			
			config.deleteItem ("Recent Files", eax);
			
		endif;
		
		config.insertItem( s_recent, 0, filepath );
		
		if( config.getItemCount( s_recent ) > 20) then
			
			config.deleteItem( s_recent, 20 );
			
		endif;
		updateMenu();
		ret();
	end updateRecentLog;

	setText :procedure( hfile:dword );
	
		// load a file into the buffer
	
	begin setText;
		
		w.SetWindowText( info.hred, 0 );
		w.GetFileSize( hfile, NULL );
		if( eax > 0 ) then
			mov( hfile, editstream.dwCookie );
			mov( &StreamInProc, editstream.pfnCallback );
			w.SendMessage( info.hred, w.EM_STREAMIN, w.SF_TEXT, &editstream );
			w.SendMessage( info.hred, w.EM_SETMODIFY, false,0 );
		else
		
		endif;
	end setText;

	loadFile :procedure( filename:string );
	
		// load filename into the edit buffer
		var
			hfile	:dword;
			
	
	begin loadFile;
		dbg.put("loadFile :", filename);		
		try
			
			fileio.open( filename, fileio.r );
			mov( eax, hfile );
			setText( hfile );
			fileio.close( hfile );
			str.cpy( filename, filepath );

			dbg.put("filename = ", filename );
			filesys.extractExt( filename, strbuf );
			checkLog();
			updateRecentLog();
			setFormat();
			// clear the undo buffer since we probably made some formatting and alterations
			// to the file
			w.SendMessage( info.hred, w.EM_EMPTYUNDOBUFFER, 0, 0 );
			setWindowTitle();		
			or( 1, eax );
			
		anyexception
			
			Error( s_noopen, true );
			xor( eax, eax );
			
		endtry;
		
		dbg.put("/loadFile");
	end loadFile;

	fileOpen :procedure;
	
		// get a filename from openfile dialog
		// get it loaded into buffer
		var
			ofn	:w.OPENFILENAME;
				
	begin fileOpen;
	
		lea( eax, ofn );
		w.RtlZeroMemory(eax,@size(ofn));
		mov	(@size(ofn),ofn.lStructSize);
		mov	(window.hwnd,ofn.hWndOwner);
		mov( hinst, ofn.hInstance );
		
		mov	(&curdir,eax);
		mov (eax, ofn.lpstrInitialDir);
		
		mov (0, buffer[0]);
		mov (&buffer, ofn.lpstrFile);
		mov	(@elements(buffer)-1, ofn.nMaxFile);
		
		mov	(w.OFN_PATHMUSTEXIST | w.OFN_FILEMUSTEXIST | w.OFN_LONGNAMES,ofn.Flags);
		w.GetOpenFileName(ofn);
			if (eax) then
				str.cpyz( &buffer, hide.strbuf );
				loadFile( hide.strbuf );
			endif;
		w.SetFocus(info.hred);
		updateStatus();
	end fileOpen;

	Msg_OpenDroppedFile :procedure( hwnd:dword; wParam:dword; lParam:dword );

		// handles opening dropped files

	begin Msg_OpenDroppedFile;
		pushabi;
		
		w.SetForegroundWindow(window.hwnd);
		w.SetFocus(info.hred);	
	
		getConfirm();
		if (!eax) then	
			w.SetWindowText( info.hred, 0 );		// clear edit window
			w.DragQueryFile( wParam, 0, &buffer, @size(buffer) );
			w.GetLongPathName( &buffer, &buffer, @size(buffer) );
			str.cpyz( &buffer, hide.strbuf );
			loadFile( hide.strbuf );
			
		endif;
		popabi;
		xor( eax, eax );
		
	end Msg_OpenDroppedFile;	
		
	findNormal :procedure( opts:dword );
	
		// basic text search
	
	begin findNormal;
		
		move( &findbuf, ft.lpstrText);
		dbg.put("find normal : ");
		dbg.putz( ft.lpstrText );
		w.SendMessage( info.hred, w.EM_FINDTEXTEX, opts, &ft );
		mov( eax, fres );
		if(eax != -1) then
	
			w.SendMessage( info.hred, w.EM_EXSETSEL, 0, &ft.chrgText );
			w.SendMessage( info.hred,w.EM_SCROLLCARET,0,0 );
	
		else

			// done search, reset and start searching from top
			// or bottom
			if( info.find_mode.down ) then
				w.SendMessage( info.hred, w.EM_SETSEL, 0, 0 );
				mov( 0, ft.chrg.cpMin );
				
			else
				w.SendMessage( info.hred, w.WM_GETTEXTLENGTH, 0, 0 );
				w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
			endif;
		endif;
		
	end findNormal;
	
	findPattern :procedure( opts:dword );
		
		// uses pattern matching to search for text
		
		var
			hmem	:hide.memory;
			
	
	begin findPattern;
		
		dbg.enters( "findPattern" );
		cmp( (type byte findbuf[0]), 0 );
		mov( 0, hmem );
		je retFalse;
		
		move( ft.chrg.cpMin, find_range.chrg.cpMin );
		w.SendMessage( info.hred, w.WM_GETTEXTLENGTH, 0, 0 );
		mov( eax, find_range.chrg.cpMax );
		sub( ft.chrg.cpMin, eax );
		
		add( 4, eax );
		mem.zalloc( eax );
		mov( eax, hmem );
		mov( eax, find_range.lpstrText );
		
		w.SendMessage( info.hred, w.EM_GETTEXTRANGE, 0, &find_range );
		mov( hmem, esi );
		str.cpyz( &findbuf, hide.strbuf );
		scan.pfind( hide.strbuf, info.find_mode.matchcase );
		jnc retFalse;
		
		// we found the pattern...
		// find it's index and length.  esi = start, edi = end.
		// edi - esi = length
		// esi - hmem = index into buffer
		mov( esi, eax ); 
		sub( hmem, eax );
		add( eax, ft.chrg.cpMin );
		move( ft.chrg.cpMin, fres );
		mov( edi, eax );
		sub( esi, eax );
		push( ft.chrg.cpMin );
		pop( ft.chrg.cpMax );
		add( eax, ft.chrg.cpMax );
		w.SendMessage( info.hred, w.EM_EXSETSEL, 0, &ft.chrg );
		w.SendMessage( info.hred,w.EM_SCROLLCARET,0,0 );
		
		jmp done;
		
		retFalse:
			dbg.put("not found");
			w.SendMessage( info.hred, w.EM_SETSEL, 0, 0 );
			mov( 0, ft.chrg.cpMin );
			mov( -1, fres );
			
			
		done:
			if( hmem > 0 ) then
				mem.free( hmem );
			endif;
			mov( fres, eax );
				
		dbg.exits( "findPattern" );		
	end findPattern;
	
	Find :procedure {@noframe};
	
		// looks for selection
		// searches for text based on user settings
	
	begin Find;
		pushabi;
		dbg.put("find");
		w.SendMessage(info.hred, w.EM_EXGETSEL,0, &ft.chrg);
		
		if( info.find_mode.down ) then
	
			mov( ft.chrg.cpMax, eax );
			if( eax != ft.chrg.cpMin ) then
				// we have a selection already, don't try to find
				// currently selected text!
				push( ft.chrg.cpMax );
				pop( ft.chrg.cpMin );
			endif;
			mov( -1, ft.chrg.cpMax );

		else

			mov( 0, ft.chrg.cpMax );

		endif;

		xor( eax, eax );
		if( info.find_mode.down ) then
			or( w.FR_DOWN, eax );
		endif;
		if( info.find_mode.matchcase ) then
			or( w.FR_MATCHCASE, eax );
		endif;
		if( info.find_mode.wholeword ) then
			or( w.FR_WHOLEWORD, eax );
		endif;

		if( info.find_mode.matchpattern ) then
			
			findPattern( eax );
			
		else
			
			findNormal( eax );
			
		endif;
		popabi;
		ret();
	end Find;

	AddMenus :procedure;
		
		// initializes menus
		
		storage
			file_menu :dword;
			edit_menu :dword;
			options_menu :dword;
			view_menu :dword;
			help_menu :dword;
			s_recent_menu :dword;
			
	begin AddMenus;
		
		// create all the menu handles here
		mov( w.CreateMenu(), file_menu);
		mov( w.CreateMenu(), edit_menu);
		mov( w.CreateMenu(), options_menu);
		mov( w.CreateMenu(), view_menu);
		mov( w.CreateMenu(), help_menu);
		mov( w.CreatePopupMenu(), s_recent_menu );
		
		//
		//	File Menu
		//
		
		w.AppendMenu( file_menu, w.MF_STRING, IDM_NEW, "&New	Ctrl+N");
		w.AppendMenu( file_menu, w.MF_STRING, IDM_OPEN, "&Open	Ctrl+O");
		w.AppendMenu( file_menu, w.MF_STRING, IDM_INST, "New &Window	Shift+Ctrl+N");
		w.AppendMenu( file_menu, w.MF_SEPARATOR, NULL, NULL);
		w.AppendMenu( file_menu, w.MF_STRING, IDM_SAVE, "&Save	Ctrl+S");
		w.AppendMenu( file_menu, w.MF_STRING, IDM_SAVEAS, "Save &As...	Shift+Ctrl+S");
		w.AppendMenu( file_menu, w.MF_STRING, IDM_SAVE_SELECTION_AS, "Save Se&lection As...");
		w.AppendMenu( file_menu, w.MF_SEPARATOR, NULL, NULL);
		w.AppendMenu( file_menu, w.MF_STRING, IDM_RECENT, "Recent Files");
		w.AppendMenu( file_menu, w.MF_SEPARATOR, NULL, NULL);
		w.AppendMenu( file_menu, w.MF_STRING, IDM_QUIT, "&Quit	ESC");
		w.AppendMenu( window.hmenu, w.MF_POPUP, file_menu, "&File");

		//
		//	Edit Menu
		//
	
		w.AppendMenu( edit_menu, w.MF_STRING, IDM_UNDO, "&Undo	Ctrl+Z");
		w.AppendMenu( edit_menu, w.MF_STRING, IDM_REDO, "&Redo	Ctrl+Y");
		w.AppendMenu( edit_menu, w.MF_SEPARATOR, NULL, NULL);
		w.AppendMenu( edit_menu, w.MF_STRING, IDM_CUT, "&Cut	Ctrl+X");
		w.AppendMenu( edit_menu, w.MF_STRING, IDM_COPY, "C&opy	Ctrl+C");
		w.AppendMenu( edit_menu, w.MF_STRING, IDM_PASTE, "&Paste	Ctrl+V");
		w.AppendMenu( edit_menu, w.MF_STRING, IDM_SELECTALL, "Select &All	Ctrl+A");
		w.AppendMenu( edit_menu, w.MF_SEPARATOR, NULL, NULL);
		w.AppendMenu( edit_menu, w.MF_STRING, IDM_FIND, "&Find / Replace	Ctrl+F");
		w.AppendMenu( edit_menu, w.MF_STRING, IDM_FINDNEXT, "Find &Next	F3");
		w.AppendMenu( edit_menu, w.MF_STRING, IDM_FINDPREV, "Find &Previous	Ctrl+F3");
		w.AppendMenu( edit_menu, w.MF_STRING, IDM_EDIT_GOTO, "&Goto Line	Ctrl+G");
		w.AppendMenu( edit_menu, w.MF_SEPARATOR, NULL, NULL);
		w.AppendMenu( edit_menu, w.MF_STRING, IDM_TIME, "&Insert Date/Time	F5");
		w.AppendMenu( window.hmenu, w.MF_POPUP, edit_menu, "&Edit");

		//
		//	Options Menu
		//

		w.AppendMenu( options_menu, w.MF_STRING, IDM_FONT, "&Font...");
		w.AppendMenu( options_menu, w.MF_STRING, IDM_FORGROUND, "&Forground Color...");
		w.AppendMenu( options_menu, w.MF_STRING, IDM_BACKGROUND, "&Background Color...");
		w.AppendMenu( options_menu, w.MF_SEPARATOR, NULL, NULL);
		w.AppendMenu( options_menu, w.MF_STRING, IDM_AUTO, "&Autosave	F2");
		w.AppendMenu( options_menu, w.MF_STRING, IDM_READONLY, "&Read Only	F6");
		w.AppendMenu( options_menu, w.MF_STRING, IDM_SETTAB, "&Set Tabs...");
		w.AppendMenu( options_menu, w.MF_STRING, IDM_TAB_AS_SPACE, "Tabs As &Spaces");
		w.AppendMenu( options_menu, w.MF_STRING, IDM_AUTOINDENT, "Auto &Indent");
		w.AppendMenu( options_menu, w.MF_STRING | w.MF_POPUP, s_recent_menu, "Recent File Options");
			w.AppendMenu( s_recent_menu, w.MF_STRING, IDM_RECENTNEW, "Open in New Window");
			w.AppendMenu( s_recent_menu, w.MF_STRING, IDM_CLEAREXIT, "Clear History on Exit");
			w.AppendMenu( s_recent_menu, w.MF_STRING, IDM_OPENRECENT, "Open Most Recent");
			w.AppendMenu( s_recent_menu, w.MF_STRING, IDM_REMEMBERPOS, "Remember Position");
		w.AppendMenu( options_menu, w.MF_SEPARATOR, NULL, NULL);
		w.AppendMenu( window.hmenu, w.MF_POPUP, options_menu, "&Options");

		//
		//	View Menu
		//

		w.AppendMenu( view_menu, w.MF_STRING, IDM_PEG, "&Stay on Top	Ctrl+T");
		w.AppendMenu( view_menu, w.MF_STRING, IDM_WRAP, "&Word Wrap	F4");
		w.AppendMenu( view_menu, w.MF_STRING, IDM_VIEW_STATUS, "&Status Bar");
		w.AppendMenu( window.hmenu, w.MF_POPUP, view_menu, "&View");

		//
		//	Help Menu
		//

		w.AppendMenu( help_menu, w.MF_STRING, IDM_ABOUT, "&About...");
		w.AppendMenu( help_menu, w.MF_STRING, IDM_DOCUMENTS, "&Documents");
		w.AppendMenu( window.hmenu, w.MF_POPUP, help_menu, "&Help");

		w.SetMenu(window.hwnd, window.hmenu);

	end AddMenus;

	Proc_Edit	:procedure( lParam:dword; wParam:dword; uMsg:uns32; hWin:dword );
	
		// this is the subclassed window procedure of the edit control
		// here we will intercept key messages and pass down only
		// the ones we want the edit control to receive.
		static
			ctrl_down	:boolean;
			shift_down	:boolean;
			alt_down	:boolean;
			
		
		
	begin Proc_Edit;
		
		NOTE(Sevag:
			if we open any dialog while processing a key stroke
			set ctrl_down to false since the key_up
			message will be lost in the dialog's window proc)
			
		mov( uMsg, eax );
		switch( eax )
			
			case( w.WM_SYSKEYDOWN )
				dbg.put("syskey down =>", wParam );
				mov( true, alt_down );
				
			case( w.WM_SYSCHAR )
				dbg.put("syschar =>", wParam );
			
			case( w.WM_SYSKEYUP )
				dbg.put("syskey up =>", wParam );
				mov( false, alt_down );
			
			case( w.WM_KEYDOWN )
				dbg.put("key down =>", wParam );
				mov( wParam, eax );
				switch( eax )
				
					case( w.VK_SHIFT )
						mov( true, shift_down );

					case( w.VK_CONTROL )
						mov( true, ctrl_down );
						// we don't want the control key
						// going to rich edit
						jmp skip_proc;
	
					case( w.VK_W )
						
						// delete word under cursor
						if( ctrl_down ) then
							
							if( shift_down ) then
								command_copy_word();
							else
								command_delete_word();
							endif;
						endif;

					case( w.VK_D )

						if( ctrl_down ) then
							
							inc( info.cursor.end_index );
							w.SendMessage( info.hred, w.EM_EXSETSEL, 0, &info.cursor );
							w.SendMessage( info.hred, w.EM_REPLACESEL,true, s_empty );
						
						endif;
						
					case( w.VK_BSLASH )

						if( ctrl_down ) then
							
							command_cut_line();
							
						endif;
						
					case( w.VK_F )
			
						if( ctrl_down ) then
							Msg_Command( window.hwnd, IDM_FIND,0 );
							mov( false, ctrl_down );
						endif;

					case( w.VK_G )

						if( ctrl_down ) then
							Msg_Command( window.hwnd, IDM_EDIT_GOTO,0 );
							mov( false, ctrl_down );
						endif;

					case( w.VK_I )
						
						if( ctrl_down ) then
							command_cursor_up();
						endif;

					case( w.VK_J )
					
						if( ctrl_down ) then
							command_cursor_left();
							mov( 0, info.saved_column_index );
						endif;

					case( w.VK_K )
						
						if( ctrl_down) then
							command_cursor_down();
						endif;

					case( w.VK_L )
						
						if( ctrl_down ) then
							command_cursor_right();
							mov( 0, info.saved_column_index );
						endif;

					case( w.VK_LBRACKET )
					
						if( ctrl_down ) then
							command_move_to_bol();
						endif;

					case( w.VK_RBRACKET )
						if( ctrl_down ) then
							command_move_to_eol();
						endif;

					case( w.VK_N )
						if( ctrl_down ) then
							Msg_Command( window.hwnd, IDM_NEW, 0 );
							mov( false, ctrl_down );  
						endif;

					case( w.VK_O )
						if( ctrl_down ) then
							Msg_Command( window.hwnd, IDM_OPEN,0 );
							mov( false, ctrl_down );
						endif;	

					case( w.VK_S )
						if( ctrl_down && shift_down ) then
							Msg_Command( window.hwnd, IDM_SAVEAS,0 );
						elseif( ctrl_down ) then
							Msg_Command( window.hwnd, IDM_SAVE,0 );
						endif;
						mov( false, ctrl_down );

					case( w.VK_T )
						if( ctrl_down ) then
							Msg_Command( window.hwnd, IDM_PEG,0 );
						endif;

					case( w.VK_F2 )
						Msg_Command( window.hwnd, IDM_AUTO,0 );
						mov( false, ctrl_down );

					case( w.VK_F3 )
						if( ctrl_down ) then
							Msg_Command( window.hwnd, IDM_FINDPREV,0 );
						else
							Msg_Command( window.hwnd, IDM_FINDNEXT,0 );
						endif;
						
					case( w.VK_F4 )
						Msg_Command( window.hwnd, IDM_WRAP,0 );

					case( w.VK_F5 )
						Msg_Command( window.hwnd, IDM_TIME,0 );
						
					case( w.VK_F6 )
						Msg_Command( window.hwnd, IDM_READONLY,0 );

					case( w.VK_COMMA )
						if( ctrl_down ) then
							// same as ctrl-left
							// put VK_LEFT in wParam and let
							// hred window proc handle it.
							mov( w.VK_LEFT, wParam );
						endif;
						
					case( w.VK_PERIOD )
					
							
						if( ctrl_down ) then
							// same as ctrl-right
							// put VK_RIGHT in wParam and let
							// hred window proc handle it.
							mov(w.VK_RIGHT, wParam );
						endif;

					case( w.VK_TAB )
						
						if( shift_down ) then
							if( ctrl_down ) then
								
								command_reduce_indent();							
								jmp skip_proc;
							else
								command_increase_indent();
								jmp skip_proc;
							endif;
						
						elseif( config.readBool( s_settings, s_tabsasspace )) then
						
							w.SendMessage( info.hred, w.EM_REPLACESEL,true, strtabs );
							jmp skip_proc;
							
						else
							// it's a normal tab, let hred handle it
							mov( w.WM_CHAR, uMsg );
							mov( w.VK_TAB, wParam );
						endif;

					case( w.VK_RETURN )
						
						NOTE(Sevag:
							This isn't working properly if there
							is word wrap going on
						)
						
						// intercept the enter key
						// if shift-enter, then create empty line below and move cursor there
						// if ctrl-enter then create empty line above and move cursor there
						// we want to maintain auto indent features if possible. will
						// probably not work if new line is being created above the 1st line.
					
						if( ctrl_down ) then
							
							// check to see if we are on line 1
							if( info.line.number = 0 ) then
								
								// doesn't work as intended, but we need
								// to get too hacky, so just go with this.
								command_move_to_bol();
								
							else
							
								// open line above
								command_cursor_up();
								jmp do_shift;
							
							endif;
						
						elseif( shift_down ) then
							
							do_shift:
							//open line below
							// if we are not at eol, then move to eol
							mov( info.column_index, eax );
							if( info.line.length != eax ) then
								command_move_to_eol();
							endif;
						
						endif;
					
					case( w.VK_SPACE )
						
						if( ctrl_down ) then
							
							command_toggle_mark();
							jmp skip_proc;
						endif;
					
					case( w.VK_SLASH )
						
						// experimental : do incremental search
						//mov( true, info.increment_search );

					case( w.VK_ESCAPE )

						w.SendMessage( window.hwnd, w.WM_CLOSE, 0, 0 );

					default
						//dbg.put("reached default");
						mov( 0, info.saved_column_index );

				endswitch;
			
			case( w.WM_KEYUP )
				dbg.put("key up =>", wParam );
				mov( wParam, eax );
				switch( eax )
					case( w.VK_SHIFT )
						mov( false, shift_down );
						
					case( w.VK_CONTROL )
						mov( false, ctrl_down );
						jmp skip_proc;

					case( w.VK_RETURN )
						// a return was just processed in the edit control
						// do auto indent stuff
						if( config.readBool( s_settings, s_autoindent ) ) then

							w.SendMessage( info.hred, w.EM_LINEFROMCHAR, -1, 0);
							dec( eax );
							mov( szLINEBUFFER-1, (type word buffer[0]));
							w.SendMessage( info.hred, w.EM_GETLINE, eax, &buffer );
							if( eax ) then
								xor( ecx, ecx );
								while( eax ) do
									mov( buffer[ecx], dl );
									
									// counts the number of white spaces, either tabs or spaces
									if( dl == $09 || dl == ' ' ) then
										inc( ecx );
									else
										break;
									endif;
									dec( eax );
								endwhile;
								
								// if we are here, then ecx contains number of white space
								
								if( ecx ) then
									str.cpy("", strbuf );
									if( config.readBool( s_settings, s_tabsasspace ) ) then
										while( ecx ) do
											str.cat( " ", strbuf);
											dec( ecx );
										endwhile;
									else
										while( ecx ) do
											str.cat( "	", strbuf);
											dec( ecx );
										endwhile;
									endif;
									w.SendMessage( info.hred, w.EM_REPLACESEL,true, strbuf );
									w.SendMessage( info.hred, w.EM_SCROLLCARET,0,0);
								endif;
							endif;
						endif;


				default
				endswitch;
				
				// keyup was processed, things possibly happened
				// update our status information
				updateStatus();
			
			case( w.WM_CHAR )
				dbg.put("char =>", wParam );
				
				if( ctrl_down ) then
					jmp skip_proc;
				endif;

		endswitch;
		
		
		// pass control to the default edit window proc
		w.CallWindowProc(info.old_proc, hWin, uMsg, wParam, lParam );
		
		skip_proc:
			// jump here to prevent richedit processing the key press
		
	end Proc_Edit;


	Proc_Input :procedure( lParam:dword; wParam:dword; uMsg:uns32; hWin:dword );
	
		// opens a text box to get text input
	
	begin Proc_Input;
		pushabi;
		
		mov( uMsg, eax );
		
		if( eax = w.WM_COMMAND ) then
	
			mov( wParam, eax );
			mov( eax, edx );
			shr( 16, edx );
			and( $0ffff, eax );
			if( edx = w.BN_CLICKED ) then
				
				if( eax = w.IDOK ) then
					
					w.GetDlgItemTextA( hWin, IDC_EDT_INPUT, buffer, @size(buffer) );
					str.a_cpyz( &buffer );
					mov( eax, return );
					
					w.SendMessage( hWin, w.WM_DESTROY, 0, 0 );
					
				elseif( eax = w.IDCANCEL ) then
					
					mov( 0, return );
					w.SendMessage( hWin, w.WM_DESTROY, 0, 0 );
					
				endif;
				
			endif;
	
		elseif( eax = w.WM_CLOSE ) then
			
			w.SendMessage( hWin, w.WM_DESTROY, 0, 0 );
		
		elseif( eax = w.WM_DESTROY ) then
			
			w.EndDialog( hWin, return );
			
		elseif( eax = w.WM_INITDIALOG ) then
			
			if( lParam ) then
				w.SetWindowText( hWin, lParam );
			endif;
			
			w.GetDlgItem( hWin, IDC_EDT_INPUT );
			w.SetFocus( eax );
			
		endif;
		
		xor( eax, eax );
		popabi;
	end Proc_Input;

	Proc_FindDlg :procedure( lParam:dword; wParam:dword; uMsg:uns32; hWin:dword );
	
		// opens find dialog
	
	begin	Proc_FindDlg;
		pushabi;
		mov(uMsg,eax);
		if (eax = w.WM_INITDIALOG) then
			mov	(hWin, eax);
			mov	(eax,window.hfind);
			mov(0,fres);
			w.SendDlgItemMessage(hWin,IDC_FINDTEXT,w.EM_LIMITTEXT, @elements(findbuf)-1, 0);
			w.SendDlgItemMessage(hWin,IDC_FINDTEXT,w.WM_SETTEXT,0, &findbuf);
			
			w.SendDlgItemMessage(hWin,IDC_REPLACETEXT,w.EM_LIMITTEXT, @elements(replacebuf)-1, 0);
			w.SendDlgItemMessage(hWin,IDC_REPLACETEXT,w.WM_SETTEXT,0, &replacebuf);
			
			if( info.find_mode.matchcase ) then
				w.CheckDlgButton(hWin,IDC_CHK_MATCHCASE,w.BST_CHECKED);
			endif;
			
			if( info.find_mode.wholeword ) then
				w.CheckDlgButton(hWin,IDC_CHK_WHOLEWORD,w.BST_CHECKED);
			endif;
			
			if( info.find_mode.matchpattern ) then
				w.CheckDlgButton(hWin,IDC_CHK_PATTERN,w.BST_CHECKED);
			endif;
			
			if( info.find_mode.down ) then
				mov( IDC_RBN_DOWN, edx );
			else
				mov( IDC_RBN_UP, edx );
			endif;
			w.CheckDlgButton(hWin, edx, w.BST_CHECKED);
				
		elseif (eax = w.WM_COMMAND) then
			mov	(wParam, eax);
			mov	(eax,edx);
			shr	(16,edx);
			and	($ffff,eax);
			if (edx = w.BN_CLICKED) then
				
				if(eax = w.IDOK) then
					
					Find();
					w.SetFocus(window.hfind);
					
				elseif(eax = w.IDCANCEL) then
				
					w.SendMessage( hWin, w.WM_CLOSE, NULL, NULL );
					
				elseif(eax = IDC_BTN_REPLACE) then
					
					if (fres!=-1) then
					
						w.SendMessage(info.hred,w.EM_EXGETSEL,0,&ft.chrg);
						w.SendMessage(info.hred,w.EM_REPLACESEL,true, &replacebuf);
						zstr.len( &replacebuf );
						w.lstrlen( &replacebuf ); 
						add(eax,ft.chrg.cpMin);
						mov(ft.chrg.cpMin,eax);
						mov(eax,ft.chrg.cpMax);
						w.SendMessage(info.hred,w.EM_EXSETSEL,0,&ft.chrg);
						
					endif;
					Find();
					w.SetFocus(window.hfind);
	
				elseif (eax = IDC_BTN_REPLACEALL) then
					
					mov( true, info.find_mode.down );
					
					w.SendMessage (info.hred, w.EM_EXGETSEL, 0, &chrg);
					w.LockWindowUpdate(info.hred);
					w.SendMessage (info.hred, w.EM_SETSEL, 0, 0);
					Find();
					while (fres!=-1) do
						w.SendMessage(hWin, w.WM_COMMAND, IDC_BTN_REPLACE,0);
					endwhile;
					push (chrg.start_index);
					pop (chrg.end_index);
					w.SendMessage (info.hred, w.EM_EXSETSEL, 0, &chrg);
					w.LockWindowUpdate(NULL);
					w.SetFocus(window.hfind);
					
				elseif (eax = IDC_RBN_DOWN) then
					
					mov( true, info.find_mode.down );
					mov	(-1,fres);
					
				elseif (eax = IDC_RBN_UP) then
					
					mov( false, info.find_mode.down );
					mov( false, info.find_mode.matchpattern );
					w.CheckDlgButton( hWin, IDC_CHK_PATTERN, w.BST_UNCHECKED );
					mov	(-1, fres);
					
				elseif (eax = IDC_CHK_MATCHCASE) then
					
					w.IsDlgButtonChecked(hWin, IDC_CHK_MATCHCASE);
					if (eax) then
						mov( true, info.find_mode.matchcase );
						
					else
						
						mov( false, info.find_mode.matchcase );
						
					endif;
					mov	(-1, fres);
					
				elseif (eax = IDC_CHK_WHOLEWORD) then
					
					w.IsDlgButtonChecked(hWin, IDC_CHK_WHOLEWORD);
					if (eax) then
						
						//or	(w.FR_WHOLEWORD, fr);
						mov( true, info.find_mode.wholeword );
						mov( false, info.find_mode.matchpattern );
						w.CheckDlgButton( hWin, IDC_CHK_PATTERN, w.BST_UNCHECKED );
						
					else
						
						//and(! w.FR_WHOLEWORD,fr);
						mov( false, info.find_mode.wholeword );
						
					endif;
					mov	(-1,fres);
					
				elseif( eax = IDC_CHK_PATTERN ) then
					
					w.IsDlgButtonChecked(hWin, IDC_CHK_PATTERN);
					if (eax) then
						
						mov( false, info.find_mode.wholeword );
						mov( true, info.find_mode.matchpattern );
						w.CheckDlgButton( hWin, IDC_CHK_WHOLEWORD, w.BST_UNCHECKED );
						w.CheckRadioButton( hWin, IDC_RBN_DOWN, IDC_RBN_UP, IDC_RBN_DOWN );
						
					else
						
						mov( false, info.find_mode.matchpattern );
						
					endif;
					mov	(-1,fres);

				endif;
	
	
			elseif( edx = w.EN_UPDATE ) then
	
				push( ebx );
				mov( eax, ebx );
				if( w.SendDlgItemMessage(hWin, ebx, w.EM_GETMODIFY, 0, 0 )) then
	
					if (ebx = IDC_FINDTEXT) then
	
						w.SendDlgItemMessage(hWin, ebx, w.WM_GETTEXT, @elements(findbuf)-1, &findbuf);
						mov	(-1, fres);
						
					elseif( ebx = IDC_REPLACETEXT) then
						w.SendDlgItemMessage(hWin, ebx, w.WM_GETTEXT, @elements(replacebuf)-1, &replacebuf);
						mov	(-1, fres);
						
					endif;
					
					w.SendDlgItemMessage( hWin, ebx, w.EM_SETMODIFY, false, 0 );
				endif;
				



				pop( ebx );
	
			endif;
			
		elseif (eax = w.WM_ACTIVATE) then
			w.SetFocus( window.hfind );
	
		elseif (eax = w.WM_CLOSE) then
			w.DestroyWindow(window.hfind);
			mov	(0,window.hfind);
			w.SetFocus(info.hred);
		else
			mov	(false, eax);
			popabi;
			exit Proc_FindDlg;
		endif;
		mov	(true, eax);
		popabi;
	end Proc_FindDlg;	


	getConfigPath :procedure( s:string );
	
		// locates the configuration file
		var
			default_config	:string;
			find_config		:string; 
	
	begin getConfigPath;
		
		mov( str.talloc( w.MAX_PATH ), default_config );
		mov( str.talloc( w.MAX_PATH ), find_config );
		
		
		// look for config at default location, which is SavageEd folder
		w.GetModuleFileName (hinst, &buffer, @size(buffer) );
		str.cpyz( &buffer, default_config );
		filesys.extractPath( default_config, default_config );
		str.put2( default_config, '\', config_file );
		if( filesys.exists( default_config )) then
			
			// we found config in SavageEd home folder, means the user
			// wants to use a local configuration file.
			str.cpy( default_config, s );
		else
			
			// no default config file, look for one in %USERPROFILE%\config\
			w.ExpandEnvironmentStrings( "%USERPROFILE%", &buffer, szLINEBUFFER );
			str.cpyz( &buffer, find_config ); 
			str.put2( find_config, "\config\", config_file );

			if( filesys.exists( find_config )) then
				
				// we found a profile in the user folder
				str.cpy( find_config, s );
			
			else
				
				// there is no config file, use default
				str.cpy( default_config, s );
				
			endif;
			
		endif;
	
		//dbg.put("default_config :", default_config );
		//dbg.put("find_config :", find_config );
		
	end getConfigPath;


	initConfig	:procedure { @noframe };
	
	/*
		Look for SavageEd.ini file:
			Look in current folder, if found, use that one.
			else, look in %USERPROFILE%\config\, if found, use that one.
			else, create a new one in the current folder.
		
		read settings from config file
		expand this as more settings are added
	*/
	
	begin initConfig;
		getConfigPath( hide.strbuf );
		if( filesys.exists( hide.strbuf ) ) then
			
			// set default find mode
			mov( false, info.find_mode.down );
			mov( false, info.find_mode.wholeword );
			mov( false, info.find_mode.matchcase );
			mov( false, info.find_mode.matchpattern );
			
			mov( 0, info.saved_column_index );
			
			// config file exists, read it and
			// apply settings as per file.
			config.create_file( hide.strbuf );
			config.readUns( s_window, "xPos" );
			mov( eax,window.xPos );
			config.readUns( s_window, "yPos" );
			mov( eax,window.yPos );
			config.readUns( s_window, "width" );
			mov( eax,window.width );
			config.readUns( s_window, "height" );
			mov( eax,window.height );
			
			config.readBin( s_text, s_font, &logfont, @size( logfont ) );
			config.readHex( s_text, s_background_color);
			mov( eax, window.backColor );
			config.readHex( s_text, s_text_color);
			mov( eax, window.textColor );

			config.readBin( s_text, s_custcolors, &customColors, @size( customColors ) );
			config.readBin( s_text, s_find, &info.find_mode, @size( info.find_mode ) ); 
			
		else
			
			// no file exists, create one
			// and set up with default settings.
			
			config.create();
			config.writeUns( s_settings, s_tabs, DEFAULT_TAB_STOP );
			getConfigPath( hide.strbuf );
			config.writeFileName( hide.strbuf );

			// some hard coded defaults
			mov( 10,window.xPos );
			mov( 10,window.yPos );
			mov( 640,window.width );
			mov( 400,window.height );
			
			mov( color_white, window.backColor);
			mov( color_black, window.textColor);
			
			// get default font
			zstr.cpy( (type zstring s_fontname ), &logfont.lfFaceName );
			mov( -12, logfont.lfHeight );
			mov( 400, logfont.lfWeight );
			
		endif;
		
		ret();		
	end initConfig;


	initWindow	:procedure { @noframe };
	
	//	window creation initialization goes here
	//	register and create window.
		
	//	returns:
	//		success = true in eax
	//		failure = false in eax
		static 	wc:w.WNDCLASSEX;

		
	begin initWindow;
		
		w.GetModuleHandle( NULL );
		mov( eax, hinst );
		
		w.LoadLibrary( RichEditDLL );
		if (eax = NULL ) then
			Error( s_missingDLL, false );
			xor(eax,eax);
			ret();
	    endif;
	    
		mov	(eax,hredDLL);
		
		w.InitCommonControls();
		str.cpy( s_untitled, filepath );

		mov( 0, findbuf[0] );
		mov( 0, replacebuf[0] );		

		w.CreateFontIndirect( &logfont );
		mov( eax, info.hfont );
		
		// main window created here
		// describe and register the window class
		mov( @size(w.WNDCLASSEX), wc.cbSize );
		mov( w.CS_HREDRAW | w.CS_VREDRAW, wc.style );
		mov( &WndProc, wc.lpfnWndProc );
		mov( NULL, wc.cbClsExtra );
		mov( NULL, wc.cbWndExtra );
		mov( hinst, wc.hInstance );
		mov( w.COLOR_BTNFACE+1, wc.hbrBackground );
		mov( ClassName, wc.lpszClassName );
		
		w.LoadIcon(hinst, val ID_JAKAL);
		mov( eax, wc.hIcon );
		mov( eax, wc.hIconSm );
		w.LoadCursor( NULL, val w.IDC_ARROW );
		mov( eax,wc.hCursor );
		
		// register the window class
		if ( ! w.RegisterClassEx( wc )) then
			Error( "Unable to register Window Class", false);
			ret();
		endif;
			
		// create the window
		w.CreateWindowEx(
				NULL,					// dwExStyle
				ClassName,				// lpClassName
				AppName,				// lpWindowName
				w.WS_OVERLAPPEDWINDOW,	// dwStyle
				window.xPos,	// x
				window.yPos,	// y
				window.width,	// nWidth
				window.height,	// nHeight
				NULL,					// hWndParent
				NULL,					// hMenu
				hinst,					// hInstance
				NULL );					// lpParam
				
		if( ! eax ) then
			Error( "Unable to create window", false);
			ret();
		endif;
		
		w.ShowWindow( window.hwnd, w.SW_SHOWNORMAL );
		w.UpdateWindow( window.hwnd );

		ret();
	end initWindow;

	Cmd_File_Quit :procedure( hwin:dword; wparam:dword; lparam:dword );
	begin Cmd_File_Quit;
		
		w.SendMessage (hwin, w.WM_CLOSE, 0, 0 );
		
	end Cmd_File_Quit;

	updateStatus :procedure;
		
		// update the status bar
		// called every time a key up message is processed
		// or when the status bar needs to be updated
			
	begin updateStatus;
		
		getInfo( info );
		
		// draw the line/pos information on the status bar
		mov( info.line.number, eax );
		inc( eax );
		conv.u32ToStr( eax, 20, ' ', hide.strbuf );
		str.trim( hide.strbuf );
		str.put( strbuf, "Line: ", hide.strbuf, "   " );
		conv.u32ToStr( info.column_index, 20,' ', hide.strbuf );
		str.trim( hide.strbuf );
		str.put2( strbuf, "Column: ", hide.strbuf, "   " );
		mov( info.lines, eax );
		str.put2( strbuf, "    Pos: ", (type uns32 info.cursor.start_index ), " | Lines: ", (type uns32 eax));
		
		w.SendMessage( window.hstatus, w.SB_SETTEXT, 0, strbuf ); 
		
		// update insert/overwrite/visual mode notifiers
		if( info.ins_ovr ) then
			w.SendMessage( window.hstatus, w.SB_SETTEXT, 1, s_overwrite );
		else
			w.SendMessage( window.hstatus, w.SB_SETTEXT, 1, s_insert );
		endif;
		
		if( config.readBool( s_settings, s_readonly )) then
			w.SendMessage( window.hstatus, w.SB_SETTEXT, 2, s_r );
		else
			w.SendMessage( window.hstatus, w.SB_SETTEXT, 2, s_b );
		endif;
		
		if( info.mark.isSet ) then
			
			//visual select mode is on, follow the selection
			w.SendMessage( window.hstatus, w.SB_SETTEXT, 3, s_mark );
			
		else
			w.SendMessage( window.hstatus, w.SB_SETTEXT, 3, s_b );
		endif;
		
		// window title may have changed somewhere along the line, update it
		setWindowTitle();
		
	end updateStatus;

	Msg_Create :procedure( hwin:dword; wparam:dword; lparam:dword );
	
		// create the main window
		// read settings from config to determine positions
		// update menus based on configuration settings
		// looks for command line passed arguments to open existing file
		// or start new file.
		var
			edit_style	:dword;
			
	
	begin Msg_Create;
		
		mov(hwin, eax);
		mov(eax, window.hwnd);
		w.CreateMenu();
		mov(eax, window.hmenu);
		w.SetMenu(window.hwnd, window.hmenu);
		//w.GetMenu( hwnd );
		//mov( eax, hmenu );
		AddMenus();
		w.GetSubMenu( window.hmenu, 1 );
		mov( eax, window.hcontextmenu );
		w.DragAcceptFiles( window.hwnd, true );

		w.CreateStatusWindow( w.WS_CHILD, NULL, window.hwnd, IDC_SBAR );
		mov( eax, window.hstatus );
		w.SendMessage( eax, w.SB_SETPARTS, STATUS_PARTS, &statusParts );


		mov( 	w.ES_AUTOVSCROLL | w.ES_LEFT | w.ES_MULTILINE |
				w.ES_NOHIDESEL | w.ES_WANTRETURN |
				w.WS_CHILD | w.WS_CLIPSIBLINGS | w.WS_HSCROLL | w.ES_AUTOHSCROLL |
				w.WS_VSCROLL | w.WS_VISIBLE,
				edit_style );
					
				
		// create edit window
		w.CreateWindowEx( w.WS_EX_CLIENTEDGE, s_resedClass, NULL,
					edit_style, 0, 0, 0, 0, window.hwnd, window.hcontextmenu, hinst, NULL );
		
		mov( eax, info.hred );
		
		// subclass the edit control
		w.SetWindowLong(info.hred, w.GWL_WNDPROC, &Proc_Edit);
		mov( eax, info.old_proc);
		
		w.SendMessage( info.hred, w.EM_SETEVENTMASK, 0, w.ENM_SELCHANGE | w.ENM_KEYEVENTS
						| w.ENM_MOUSEEVENTS );
		
		setFormat();
		w.SetFocus( info.hred );
		
		if( config.readBool( s_settings, s_wrap )) then
			
			w.CheckMenuItem( window.hmenu, IDM_WRAP, w.MF_BYCOMMAND | w.MF_CHECKED );
			w.SendMessage( info.hred, w.EM_SETTARGETDEVICE, NULL, 0 );
		else
			w.SendMessage( info.hred, w.EM_SETTARGETDEVICE, NULL, 1 );			
		endif;
		
		if( config.readBool( s_settings, s_readonly )) then
			
			w.CheckMenuItem( window.hmenu, IDM_READONLY, w.MF_BYCOMMAND | w.MF_CHECKED );
			or( w.ES_READONLY, edit_style );
		endif;
		
		
		// update menu
		dbg.put("updatemenu");
		if( config.isSectionDefined( s_recent ) ) then
			updateMenu();
		endif;
				
		if( config.readBool( s_settings, s_autosave ) ) then
			w.CheckMenuItem( window.hmenu, IDM_AUTO, w.MF_BYCOMMAND | w.MF_CHECKED);
		endif;
		
		if( config.readBool( s_settings, s_autoindent ) ) then
			w.CheckMenuItem( window.hmenu, IDM_AUTOINDENT, w.MF_BYCOMMAND | w.MF_CHECKED);
		endif;
		
		if( config.readBool( s_settings, s_tabsasspace ) ) then
			w.CheckMenuItem( window.hmenu, IDM_TAB_AS_SPACE, w.MF_BYCOMMAND | w.MF_CHECKED);
		endif;
		
		if( config.readBool( s_settings, s_topwindow )) then

			w.CheckMenuItem( window.hmenu, IDM_PEG, w.MF_BYCOMMAND | w.MF_CHECKED );
			w.SetWindowPos( window.hwnd, w.HWND_TOPMOST, 0, 0, 0, 0, 0 );		

		endif;
		
		if( config.readBool( s_settings, s_clearexit ) ) then
			
			w.CheckMenuItem( window.hmenu, IDM_CLEAREXIT, w.MF_BYCOMMAND | w.MF_CHECKED );
			
		endif;
		
		if( config.readBool( s_settings, s_recentnew ) ) then
			
			w.CheckMenuItem( window.hmenu, IDM_RECENTNEW, w.MF_BYCOMMAND | w.MF_CHECKED );
			
		endif;
			
		if( config.readBool( s_settings, s_openrecent ) ) then
			
			w.CheckMenuItem( window.hmenu, IDM_OPENRECENT, w.MF_BYCOMMAND | w.MF_CHECKED );
			
		endif;
		
		if( config.readBool( s_settings, s_rememberpos ) ) then
			w.CheckMenuItem( window.hmenu, IDM_REMEMBERPOS, w.MF_BYCOMMAND | w.MF_CHECKED );
		endif;
		
		if( config.readBool( s_window, s_status ) ) then
			
			w.CheckMenuItem( window.hmenu, IDM_VIEW_STATUS, w.MF_BYCOMMAND | w.MF_CHECKED );
			w.ShowWindow( window.hstatus, true );
			
		endif;
		
		// check for a filename passed as an argument and try to open that file.
		// if file doesn't exist, start new document with that filename.
		
		arg.c();
		if( eax > 1 ) then
			
			// get an argument, see if it is a file that exists,
			// if so, open it.
			
			arg.v( 1 );
			w.GetLongPathName( eax, &buffer, @size(buffer) -1 );
			if (eax) then
				
				// file path copied, try to open it.
				
				str.cpyz( &buffer, hide.strbuf );
				loadFile( hide.strbuf );
				if (eax) then
					jmp skipOpenRecent;
				endif;
			else
				
				// there is no file, create a new document with name passed on command line
				filesys.gwd( filepath );
				str.cat ("\", filepath);
				arg.v(1);
				str.catz (eax, filepath); 
				jmp skipOpenRecent;
			endif;
		endif;
		
		// no file requested as an argument,
		// check config to see if we want to open the most recent document
		
		if( config.readBool( s_settings, s_openrecent ) ) then
			
			// we want to open the most recent file. do we have a recent file to open?
			
			if( config.isSectionDefined( s_recent )) then
				
				config.readItem( s_recent, 0, hide.strbuf );
				loadFile( hide.strbuf );
				if( ! eax ) then
					
					// the file we want to open doesn't exit anymore. remove it from our list.
					config.deleteItem( s_recent, 0 );
					updateMenu();
				endif;
				
				// do we want to move the cursor to the position it was when the file was closed?
				
				if( config.readBool( s_settings, s_rememberpos )) then
					config.readUns( s_settings, "Start Position");
					mov( eax, info.cursor.start_index );
					mov( eax, info.cursor.end_index );
					w.SendMessage( info.hred, w.EM_EXSETSEL, 0, &info.cursor );
					w.SendMessage( info.hred,w.EM_SCROLLCARET,0,0 );
				endif;
				
			endif;
			
		endif;
		
		skipOpenRecent:	
		setWindowTitle();
		updateStatus();
		
		xor( eax, eax );
		
	end Msg_Create;

	Msg_Context :procedure( hwnd:dword; wParam:dword; lParam:dword );
		
		// right click context menu
		// opens edit menu
		
		var
			pt	:w.POINT;
		
	begin Msg_Context;
		mov (lParam, eax);
		if (eax = -1) then
			w.GetCaretPos (pt);
			w.GetFocus();
			mov (eax, edx);
			w.ClientToScreen (edx, pt);
		else
			and ($ffff, eax);
			mov (eax, pt.x);
			mov (lParam, eax);
			shr (16, eax);
			mov (eax, pt.y);
		endif;
		
		mov (wParam, eax);
		if (eax = info.hred) then
			w.GetMenu (hwnd);
			w.GetSubMenu (eax, 1);	// edit menu, 2nd item
			w.TrackPopupMenu(eax, w.TPM_LEFTALIGN | w.TPM_RIGHTBUTTON, pt.x,pt.y,0,hwnd,NULL);
		endif;
		
		xor( eax, eax );
		
	end Msg_Context;
	
	setTabWidth :procedure { @noframe, @returns("EAX") };
	
		// opens dialog to set tab width
	
	begin setTabWidth;
		w.DialogBoxParam( hinst, val ID_INPUT, window.hwnd, &Proc_Input, s_inputtab );
		if( return > 0 ) then
			try
				conv.strTou32( return, 0 );
				
			anyexception
				xor( eax, eax );
			endtry;
		else
			xor( eax, eax );
		endif;
		ret();
	end setTabWidth;

	Msg_Close :procedure( hwin:dword; wparam:dword; lparam:dword );
	
		// close app. warn about unsaved changes
	
	begin Msg_Close;
	
	 	getConfirm();
		if (!eax) then
		 	w.SendMessage(hwin, w.WM_DESTROY, 0, 0 );
		 	
		endif;
		
		xor( eax, eax );
		
	end Msg_Close;


	Msg_Destroy :procedure( hwin:dword; wparam:dword; lparam:dword );
		
		// exit protocls
		// save settings and post-close cleanups
		
		var
			wndpos	:w.WINDOWPLACEMENT;
			rect		:rect_t;
			
	begin Msg_Destroy;
	
		dbg.put("destroy");
		
		w.GetWindowPlacement( hwin, wndpos );
		w.GetWindowRect( hwin, rect );
		mov( rect.left,window.xPos );
		mov( rect.top,window.yPos );
		mov( rect.right, eax );
		sub( rect.left, eax );
		mov( eax,window.width );
		mov( rect.bottom, eax );
		sub( rect.top, eax );
		mov( eax,window.height );
		
		config.writeUns( s_window, "xPos",window.xPos );
		config.writeUns( s_window, "yPos",window.yPos );
		config.writeUns( s_window, "width",window.width );
		config.writeUns( s_window, "height",window.height );
		config.writeBin( s_text, s_find, &info.find_mode, @size( info.find_mode ) );
		
		config.writeUns( s_settings, "Start Position", info.cursor.start_index );
		
		if( config.readBool( s_settings, s_clearexit ) ) then
			
			dbg.put("deleting recent");
			config.deleteSection( s_recent );

		endif;

		
		getConfigPath( hide.strbuf );
		config.writeFileName( hide.strbuf );
		
	 	w.PostQuitMessage( NULL );
	 	xor( eax, eax );
			
	end Msg_Destroy;


	getLineInfo :procedure(var line:LineInfo);
		
		// input expects a LineInfo structure with the
		// .line field containing the desired line information
		// will fill the rest of the structure.
		// returns 0 if no line is available
		
	begin getLineInfo;
		USE (EBX);
		mov( line, ebx );
		w.SendMessage( info.hred, w.EM_LINEINDEX, (type LineInfo [ebx]).number, 0 );
		if( (type int32 eax) >= 0 ) then
			mov( eax, (type LineInfo[ebx]).index );

			w.SendMessage( info.hred, w.EM_LINELENGTH, eax, 0 );
			mov( eax, (type LineInfo[ebx]).length );
		else
			xor( eax, eax );
		endif;
		ENDUSE;
	end getLineInfo;

	
	getInfo: procedure ( var inf:EditInfo );
	
		// collects informaiton about the edit state
		// and stores it in the info structure
	
	begin getInfo;

		push( edi );
		push( esi );
		mov( inf, edi );
		lea( esi, editedi.cursor );
		w.SendMessage( info.hred, w.EM_EXGETSEL, 0, esi );
		
		dbg.put("got selection :", editedi.cursor.start_index, "  :  ", editedi.cursor.end_index );
		
		w.SendMessage( info.hred, w.EM_EXLINEFROMCHAR, 0, charrangeesi.start_index );
		mov( eax, editedi.line.number );
		getLineInfo(editedi.line);
		mov( editedi.cursor.start_index, eax );
		sub( editedi.line.index, eax );
		mov( eax, editedi.column_index );
		w.SendMessage( info.hred, w.EM_GETLINECOUNT, 0, 0 );
		mov( eax, editedi.lines );

		pop( esi );
		pop( edi );

	end getInfo;

//bm=editcommands

	command_display_manual	:procedure { @noframe };
		
		// load the SavageEd.md which is saved as a
		// resource in SavageEd.exe
	
	begin command_display_manual;
		
		if( w.FindResource(hinst, val ID_SAVAGEED_MANUAL, val RAW_DATA ) ) then

			if( w.LoadResource(hinst, eax ) ) then
				
				w.SendMessage( info.hred,w.WM_SETTEXT,0, eax );
				str.cpy( s_document, filepath );
				setWindowTitle();
				w.SetFocus(info.hred);
				
			else
				
				jmp _error;	
				
			endif;
			
		else
			_error:
			Error("Couldn't Load Resource, file may be corrupted.", true);
			
			
		endif;
		ret();	

	end command_display_manual;


	command_get_line	:procedure( var line_buffer:dword );
		
		// copy the current line in the editor to buffer
		
	begin command_get_line;
		
		getInfo(info);
		dbg.put ("getting line:", info.line.number);
		
		mov( line_buffer, eax );
		mov( 3000, (type word [eax] ) );
		w.SendMessage( info.hred, w.EM_GETLINE, info.line.number, eax );
		
		// returns number of length of line copied in eax
		
	end command_get_line;

	command_get_word	:procedure {@noframe, @returns("EAX") };
	
		// returns the start and end of a word
		// in info.cursor.start_index and info.cursor.end_index
	
	begin command_get_word;
		command_get_line( &buffer );
		getInfo(info);
		
		// if we are sitting on a space, newline or tab char, don't do anything
		mov( &buffer, edx );
		add( info.column_index, edx );
		
		if( (type byte[edx]) = ' ' || (type byte[edx]) = $09 ||
		    (type byte[edx]) = $0a ) then
			xor( eax, eax );
			jmp done;
		endif;
		
		// find start index of word
		if( edx > &buffer ) then
			forever
				dec( edx );
				breakif( edx = &buffer );
				if( ((type byte [edx]) = ' ') || ((type byte[edx]) = $09) ) then
					inc( edx );
					break;
				endif;
			endfor;
		endif;
		
		// change buffer coordinate to info.hred coordinate
		sub( &buffer, edx );
		add( info.line.index, edx );
		mov( edx, info.cursor.start_index);
		
		// find end index of word
		mov( &buffer, edx );
		add( info.column_index, edx );
		forever
			inc( edx );
			breakif( (type byte[edx]) = 0 );
			breakif( (type byte[edx]) = $0d || (type byte[edx]) = $0a );
			if( ((type byte[edx]) = ' ') || ((type byte[edx]) = $09) ) then
				// eat the white space.
				inc( edx );
				break;
			endif;
		endfor;

		// change buffer coordinate to info.hred coordinate
		sub( &buffer, edx );
		add( info.line.index, edx );
		dbg.put("end index :", (type uns32 edx));
		mov( edx, info.cursor.end_index );
		
		or( 1, eax );
		done: ret();

	end command_get_word;

	command_delete_word	:procedure {@noframe};
	
		// delete the word under the cursor
		
	begin command_delete_word;
		if( command_get_word() ) then
			w.SendMessage( info.hred, w.EM_EXSETSEL, 0, &info.cursor );
			str.cpy("", strbuf );
			w.SendMessage( info.hred, w.EM_REPLACESEL, true, strbuf );
		endif;
		ret();
	end command_delete_word;


	command_copy_word :procedure {@noframe};
	begin command_copy_word;
		if( command_get_word() ) then
			w.SendMessage( info.hred, w.EM_EXSETSEL, 0, &info.cursor );
			w.SendMessage(info.hred, w.WM_COPY,0,0);			
		endif;
		ret();
	end command_copy_word;


	command_select_all :procedure {@noframe};
	begin command_select_all;
		
		mov	(0, info.cursor.end_index);
		mov	(-1,info.cursor.start_index);
		w.SendMessage(info.hred,w.EM_EXSETSEL,0,&info.cursor);
		ret();
		
	end command_select_all;

	command_cut_line	:procedure {@noframe};
	begin command_cut_line;
		// cut current line		
		getInfo(info);
		mov( info.line.index, eax );
		mov( eax, info.cursor.start_index );
		add( info.line.length, eax );
		inc( eax ); // consume carriage return
		mov( eax, info.cursor.end_index );
		w.SendMessage( info.hred, w.EM_EXSETSEL, 0, &info.cursor );
		w.SendMessage(info.hred, w.WM_CUT,0,0);
		ret();
	end command_cut_line;


	command_cursor_up	:procedure;
		
		var
			queryLine	:LineInfo;
			
	begin command_cursor_up;
		// move cursor up
		//getInfo(info);
		if( info.saved_column_index = 0 ) then
			mov( info.column_index, eax );
			mov( eax, info.saved_column_index );
		endif;

		// if we are at line 0, no point in doing anything);
		if( info.line.number > 0 ) then
			mov( info.line.number, eax);
			dec( eax );
			mov( eax, queryLine.number );
			getLineInfo( queryLine ); // info of prev. line
			mov( info.saved_column_index, eax );
			if( queryLine.length >= eax ) then

				add( queryLine.index, eax );
				
			else
				mov( queryLine.length, eax );
				add( queryLine.index, eax );
			endif;
			w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
			w.SendMessage( info.hred, w.EM_SCROLLCARET, 0, 0);
		endif;
	end command_cursor_up;

	command_cursor_down	:procedure;
		
		var
			queryLine	:LineInfo;
			
	begin command_cursor_down;
		// move cursor down							
//		getInfo(info);
		if( info.saved_column_index = 0 ) then
			mov( info.column_index, eax );
			mov( eax, info.saved_column_index );
		endif;
	
		mov( info.line.number, eax );
		inc( eax );
		if( eax < info.lines ) then
			mov( eax, queryLine.number );
			getLineInfo( queryLine );
			
			mov( info.saved_column_index, eax );
			if( queryLine.length >= eax ) then
				
				add( queryLine.index, eax );
				
			else
				mov( queryLine.length, eax );
				add( queryLine.index, eax );
			endif;
			w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
			w.SendMessage( info.hred, w.EM_SCROLLCARET, 0, 0);
		endif;
	end command_cursor_down;


	command_cursor_left	:procedure {@noframe};
	begin command_cursor_left;
		
		dbg.put("cursor_left")
	//	getInfo(info);
		mov( info.cursor.start_index, eax );
		if( eax ) then
			dec( eax );
			w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
			w.SendMessage( info.hred, w.EM_SCROLLCARET, 0, 0);
		endif;
		ret();
	end command_cursor_left;

	
	command_cursor_right	:procedure {@noframe};
	begin command_cursor_right;
		
		dbg.put("cursor_right");
	//	getInfo(info);
		mov( info.cursor.start_index, eax );
		inc( eax );
		w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
		w.SendMessage( info.hred, w.EM_SCROLLCARET, 0, 0);
		ret();
	end command_cursor_right;


	command_move_to_bol	:procedure {@noframe};
	begin command_move_to_bol;
		
		// move to beginning of line
		mov( info.line.index, eax );
		if( info.column_index = 0 && eax > 0 ) then
			
			// we're at the beginning of line, go to the beginning of prev line.
			
			dec (eax );
			w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
			//getInfo(info);
		endif;
		w.SendMessage( info.hred, w.EM_SETSEL, info.line.index, info.line.index );
		ret();
	end command_move_to_bol;

	command_move_to_eol	:procedure {@noframe};
	begin command_move_to_eol;
		// move to end of line
		mov( info.line.length, eax );
		if( info.column_index = eax ) then
			
			// we're at the end of line, go to the end of next line.
			add( info.line.index, eax );
			inc( eax ); // go over the carriage return
			w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
			//getInfo(info);
		endif;
		mov( info.line.length, eax );
		add( info.line.index, eax );
		w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
		ret();

	end command_move_to_eol;


	command_toggle_mark :procedure {@noframe};
	begin command_toggle_mark;
		
		dbg.put("toggle_mark");
		// toggle mark state
		//getInfo(info);
		
		if( info.mark.isSet ) then
			
			// close mark and set selection
			// find the start and end of the selection
			
			mov( info.mark.index, eax );
			if( eax < info.cursor.start_index ) then
				push( info.cursor.start_index );
				mov( eax, info.cursor.start_index );
				pop( info.cursor.end_index );
			else
				mov( eax, info.cursor.end_index );
			endif;
			
			w.SendMessage( info.hred, w.EM_EXSETSEL, 0, &info.cursor );
			
		else
			
			// start a mark
			mov( info.cursor.start_index, eax );
			mov( eax, info.mark.index );
			
		endif;
	
		// toggle mark
		xor( 1, info.mark.isSet );
		ret();

	end command_toggle_mark;

	command_increase_indent :procedure;
	
		// increase indent by adding a tab at bol
		// or strtabs string at bol
		// depending on user settings
		// adjust cursor to maintain relative position.
		
		var
			line		:LineInfo;
			char_index	:dword;
			n_tab		:dword;
			
	
	begin command_increase_indent;
		w.LockWindowUpdate(info.hred);
		
		push( info.column_index );
		pop( char_index );
		
		push( info.line.number );
		pop( line.number );
		getLineInfo( line );	
		
		w.SendMessage( info.hred, w.EM_SETSEL, line.index, line.index );
		
		if( config.readBool( s_settings, s_tabsasspace ) ) then
			str.cpy( strtabs, strbuf );
			mov( str.length(strtabs), n_tab );
		else
			str.cpy( "	", strbuf );
			mov( 1, n_tab );
		endif;

		w.SendMessage( info.hred, w.EM_REPLACESEL, true, strbuf );
		mov( line.index, eax );
		add( n_tab, eax );
		add( char_index, eax );
		w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
		w.LockWindowUpdate( NULL );

	end command_increase_indent;

	command_reduce_indent :procedure;
	
		// reducs the indent by checking the beginning of the
		// line for tab or space.
		// if tab is found, reduce by 1 char
		// if space is found, reduce by strtabs length of chars
		
		var
			line		:LineInfo;
			cp_min		:dword;
			
			
	begin command_reduce_indent;
		w.LockWindowUpdate(info.hred);
		
		push( info.line.number );
		pop( line.number );
		getLineInfo( line );
		push( info.cursor.start_index );
		pop( cp_min );		
		command_get_line(&buffer);
		if( buffer[0] = $09 ) then
			mov( 1, ecx );
		elseif( buffer[0] = ' ' ) then
			mov( str.length(strtabs), eax );
			for( xor( ecx, ecx ); ecx < eax; inc( ecx ) ) do
				breakif (buffer[ecx] != ' ' );
			endfor;
		else
			xor( ecx, ecx );
		endif;
		
		if( ecx ) then
			push( ecx );
			mov( line.index, eax );
			add( eax, ecx );
			w.SendMessage( info.hred, w.EM_SETSEL, eax, ecx );
			str.cpy("", strbuf );
			w.SendMessage( info.hred, w.EM_REPLACESEL, true, strbuf );
			pop( ecx );
		endif;
		
		// adjust the cursor position to maintain it's relative
		// position on the line
		// make sure we don't end up on the previous line

		mov( cp_min, eax );
		if( eax != line.index ) then
			sub( ecx, eax );
			if( eax < line.index ) then
				mov( line.index, eax );
			endif;
		endif;

		w.SendMessage( info.hred, w.EM_SETSEL, eax, eax);
		w.LockWindowUpdate(NULL);
		
	end command_reduce_indent;

/*
	Msg_Notify :procedure( hwin:dword; wparam:dword; lparam:dword );
	begin Msg_Notify;
		
		mov( lparam, edx );
		mov( (type w.NMHDR[EDX]).code, eax );
			
		if( eax = w.EN_SELCHANGE ) then
			
//			getInfo(info);
//			updateStatus();
//			setWindowTitle();
		
		endif;
		xor( eax, eax );
		
	end Msg_Notify;
*/
	
	Msg_Command :procedure( hwin:dword; wparam:dword; lparam:dword );
	
		// handle menu commands
	
	begin Msg_Command;
		mov	(wparam,eax);
		and	($0ffff,eax);
		
		switch( eax );
		case( IDM_NEW )
			
			getConfirm();
			if (!eax) then	
				
				w.SetWindowText( info.hred, 0 );		// clear edit window
				str.cpy( s_untitled, filepath );
				setWindowTitle();
				
			endif;
			w.SetFocus(info.hred);
		
		case( IDM_OPEN )
		
			getConfirm();
			if (!eax) then
			
				fileOpen(); 
	
			endif;	
			w.SetFocus(info.hred);
			
		case( IDM_INST )
			
			newInstance( NULL );
			
		case( IDM_SAVE )
		
			checkSave();
			w.SetFocus(info.hred);
			
		case( IDM_SAVEAS )
		
			SaveAs();
			w.SetFocus(info.hred);
			
		case( IDM_SAVE_SELECTION_AS )
		
			SaveSelectionAs();
			w.SetFocus(info.hred);
			
	   	case( IDM_CUT )
		
			w.SendMessage(info.hred, w.WM_CUT,0,0);
			
		case( IDM_COPY )
		
			w.SendMessage(info.hred, w.WM_COPY,0,0);
			
		case( IDM_PASTE )
		
			w.SendMessage(info.hred, w.WM_PASTE,0,0);
			w.SendMessage(info.hred, w.EM_SETMODIFY, true,0); 	
			
		case( IDM_SELECTALL )
			
			command_select_all();
			
		case( IDM_UNDO )
		
			w.SendMessage(info.hred, w.EM_UNDO,0,0);
			
		case( IDM_REDO )
		
			w.SendMessage(info.hred, w.EM_REDO,0,0);
			
		case( IDM_FIND, IDM_REPLACE )
			if (!window.hfind) then
				GetSelText (&findbuf);
				w.CreateDialogParam(hinst,val ID_FINDDLG,hwin, &Proc_FindDlg,false);
			else
				w.SetFocus(window.hfind);
			endif;
		
		case( IDM_FINDNEXT )
			
			mov( true, info.find_mode.down );
			
			if (! window.hfind) then
				GetSelText(&findbuf);
			endif;
			mov( findbuf[0], al );
			test(al,al);
			if (@nz) then
				Find(); //(w.FR_DOWN);
			endif;
			
		case(IDM_FINDPREV )
			
			mov( false, info.find_mode.down );
			
			if (! window.hfind) then
				GetSelText(&findbuf);
			endif;
			mov (findbuf[0], al);
			test(al,al);
			if (@nz) then
				Find(); //(0);
			endif;
			
		case( IDM_EDIT_GOTO )
			
			w.DialogBoxParam( hinst, val ID_INPUT, hwin, &Proc_Input, s_inputlinen );
			if( return > 0 ) then
				
				dbg.put("query :", return );
				
				try
					conv.strTou32( return, 0 );
					dec(eax);
					w.SendMessage( info.hred, w.EM_LINEINDEX, eax, 0 );
					w.SendMessage( info.hred, w.EM_SETSEL, eax, eax );
					w.SendMessage( info.hred, w.EM_SCROLLCARET, 0, 0 );
					
				anyexception
					
					str.put( hide.strbuf, "Can't go to line ", return );
					Error( hide.strbuf, true );
					
				endtry;
					
				str.free( return );
				mov( 0, return );
				
			endif;
			
		case( IDM_TIME )
	
			command_insert_time();
			
		case( IDM_FONT )
		
			selectFont();
			w.SetFocus(info.hred);
			
		case( IDM_FORGROUND )
			
			if( selectColor() )  then
				move( return, window.textColor );
				config.writeHex( s_text, s_text_color, window.textColor);
				setFormat();
			endif; 
			w.SetFocus(info.hred);
			
		case( IDM_BACKGROUND )
	
			if( selectColor() ) then
				move( return, window.backColor );
				config.writeHex( s_text, s_background_color, window.backColor);
				setFormat();
			endif;
			w.SetFocus(info.hred);
			
		case(IDM_AUTO ) 
			
			if( config.readBool( s_settings, s_autosave ) ) then
			
				w.CheckMenuItem( window.hmenu, IDM_AUTO, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				mov( false, eax );
				
			else
				
				w.CheckMenuItem( window.hmenu, IDM_AUTO, w.MF_BYCOMMAND | w.MF_CHECKED );
				mov( true, eax );
				
			endif;
			
			config.writeBool( s_settings, s_autosave, al );
			
		case(  IDM_AUTOINDENT ) 
			
			if( config.readBool( s_settings, s_autoindent ) ) then
			
				w.CheckMenuItem( window.hmenu, IDM_AUTOINDENT, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				mov( false, eax );
				
			else
				
				w.CheckMenuItem( window.hmenu, IDM_AUTOINDENT, w.MF_BYCOMMAND | w.MF_CHECKED );
				mov( true, eax );
				
			endif;
			
			config.writeBool( s_settings, s_autoindent, al );
						
		case ( IDM_WRAP) 

			if( config.readBool( s_settings, s_wrap ) ) then

				w.CheckMenuItem( window.hmenu, IDM_WRAP, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				mov( false, eax );
				
			else
				
				w.CheckMenuItem( window.hmenu, IDM_WRAP, w.MF_BYCOMMAND | w.MF_CHECKED );
				mov( true, eax );
				
			endif;
			config.writeBool( s_settings, s_wrap, al );
			if( eax ) then
				w.SendMessage( info.hred, w.EM_SETTARGETDEVICE, NULL, 0 );
			else
				w.SendMessage( info.hred, w.EM_SETTARGETDEVICE, NULL, 1 );
			endif;
			
		case ( IDM_READONLY) 
			
			if( config.readBool( s_settings, s_readonly ) ) then

				w.CheckMenuItem( window.hmenu, IDM_READONLY, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				mov( false, eax );
				
			else
				
				w.CheckMenuItem(window.hmenu, IDM_READONLY, w.MF_BYCOMMAND | w.MF_CHECKED);
				mov( true, eax );
				
			endif;
			config.writeBool( s_settings, s_readonly, al );
			w.SendMessage( info.hred, w.EM_SETREADONLY, eax, 0 );
			updateStatus();
			
		case ( IDM_CLEAREXIT) 

			if( config.readBool( s_settings, s_clearexit ) ) then

				w.CheckMenuItem( window.hmenu, IDM_CLEAREXIT, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				mov( false, eax );
			else
				
				w.CheckMenuItem(window.hmenu, IDM_CLEAREXIT, w.MF_BYCOMMAND | w.MF_CHECKED);
				mov( true, eax );
			endif;
			config.writeBool( s_settings, s_clearexit, al );
			
		case ( IDM_RECENTNEW) 
			
			if( config.readBool( s_settings, s_recentnew ) ) then

				w.CheckMenuItem( window.hmenu, IDM_RECENTNEW, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				mov( false, eax );
				
			else
				
				w.CheckMenuItem(window.hmenu, IDM_RECENTNEW, w.MF_BYCOMMAND | w.MF_CHECKED);
				mov( true, eax );
				
			endif;
			config.writeBool( s_settings, s_recentnew, al );
			
		case ( IDM_OPENRECENT) 

			if( config.readBool( s_settings, s_openrecent ) ) then

				w.CheckMenuItem( window.hmenu, IDM_OPENRECENT, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				mov( false, eax );
				
			else
				
				w.CheckMenuItem(window.hmenu, IDM_OPENRECENT, w.MF_BYCOMMAND | w.MF_CHECKED);
				mov( true, eax );
				
			endif;
			config.writeBool( s_settings, s_openrecent, al );
			
		case(  IDM_REMEMBERPOS ) 
		
			if( config.readBool( s_settings, s_rememberpos ) ) then

				w.CheckMenuItem( window.hmenu, IDM_REMEMBERPOS, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				mov( false, eax );
				
			else
				
				w.CheckMenuItem(window.hmenu, IDM_REMEMBERPOS, w.MF_BYCOMMAND | w.MF_CHECKED);
				mov( true, eax );
				
			endif;
			config.writeBool( s_settings, s_rememberpos, al );
			
		case ( IDM_PEG) 

			if( config.readBool( s_settings, s_topwindow ) ) then

				w.CheckMenuItem( window.hmenu, IDM_PEG, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				w.SetWindowPos(hwin,w.HWND_NOTOPMOST,0,0,0,0,3);
				mov( false, eax );
				
			else
				
				w.CheckMenuItem(window.hmenu, IDM_PEG, w.MF_BYCOMMAND | w.MF_CHECKED);
				w.SetWindowPos(hwin,w.HWND_TOPMOST,0,0,0,0,3);
				mov( true, eax );
				
			endif;
			config.writeBool( s_settings, s_topwindow, al );
		
		case(  IDM_SETTAB ) 
			
			if( setTabWidth() ) then
				config.writeUns( s_settings, s_tabs, eax );
				setFormat();
			endif;
			
		case( IDM_TAB_AS_SPACE )
		
			if( config.readBool( s_settings, s_tabsasspace ) ) then

				w.CheckMenuItem( window.hmenu, IDM_TAB_AS_SPACE, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				mov( false, eax );
					
			else
				
				w.CheckMenuItem(window.hmenu, IDM_TAB_AS_SPACE, w.MF_BYCOMMAND | w.MF_CHECKED);
				mov( true, eax );
				
			endif;
			config.writeBool( s_settings, s_tabsasspace, al );			
			
		case(  IDM_VIEW_STATUS ) 
			
			if( config.readBool( s_window, s_status ) ) then
				
				config.writeBool( s_window, s_status, false );
				w.CheckMenuItem( window.hmenu, IDM_VIEW_STATUS, w.MF_BYCOMMAND | w.MF_UNCHECKED );
				w.ShowWindow( window.hstatus, false );
				
			else
				
				config.writeBool( s_window, s_status, true );
				w.CheckMenuItem( window.hmenu, IDM_VIEW_STATUS, w.MF_BYCOMMAND | w.MF_CHECKED );
				w.ShowWindow( window.hstatus, true );
				
			endif;
			w.SendMessage( hwin, w.WM_SIZE, 0, 0 );
			
		case ( IDM_ABOUT) 
		
			w.CreateDialogParam(hinst,val ID_ABOUT,hwin,&AboutDlgProc,0);
	
		case ( IDM_DOCUMENTS) 
			
			getConfirm();
			if (!eax) then
			
				command_display_manual(); 
	
			endif;	
	
		case( IDM_QUIT ) 
		
			 w.SendMessage(hwin,w.WM_CLOSE,0,0);
		
		default;
			if( eax >= RECENT_MENU_START && eax <= RECENT_MENU_END ) then
				openRecent( eax );
			endif;
		endswitch;
		
		xor( eax, eax );

	end Msg_Command;

	
	WndProc :procedure( lparam:dword; wparam:dword; umsg:uns32; hwin:dword );
	
		// main window message handler
	
	begin WndProc;
		pushabi;
		mov(umsg,eax);
		mov(&message_table,edx);
		
		FOREVER
			mov( (type MsgProcPtr_t [edx]).MessageHndlr, ecx );
			IF( ecx = 0 ) THEN
				w.DefWindowProc( hwin, umsg, wparam, lparam );
				EXIT WndProc;
			ELSEIF( eax = (type MsgProcPtr_t [edx]).MessageValue ) THEN
	
				push( hwin );
				push( wparam );
				push( lparam );
				call( ecx );
				BREAK;
			ENDIF;
			add( @size( MsgProcPtr_t ), edx );
		ENDFOR;
	
		popabi;
	end WndProc;


begin SavageEd;

	dbg.cls;
	initConfig();
	initWindow();
	
	cmp( eax, 0 );
	je _exit;
	
	FOREVER
		w.GetMessage(window.msg,NULL,0,0);
		breakif( ! eax );
		w.IsDialogMessage( window.hfind, window.msg );
		continueif( eax );
		w.IsDialogMessage( window.habout, window.msg );
		continueif( eax );
		w.TranslateMessage( window.msg );
		w.DispatchMessage( window.msg );		
	ENDFOR;
	
	// tail free some resources
	w.DestroyWindow( info.hred );
	w.DeleteObject( info.hfont );
	w.FreeLibrary(hredDLL);

	mov( window.msg.wParam, eax );

	_exit:

end SavageEd;
